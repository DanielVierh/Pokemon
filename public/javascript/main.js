/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scss/style.scss":
/*!*****************************!*\
  !*** ./src/scss/style.scss ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://project-template/./src/scss/style.scss?");

/***/ }),

/***/ "./serviceWorker.js":
/*!**************************!*\
  !*** ./serviceWorker.js ***!
  \**************************/
/***/ (() => {

eval("self.addEventListener(\"install\", (event) => {\n\n})\nself.addEventListener(\"fetch\", (event) => {\n\n})\nself.addEventListener(\"activate\", (event) => {\n\n})\n\n\n//# sourceURL=webpack://project-template/./serviceWorker.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _serviceWorker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../serviceWorker.js */ \"./serviceWorker.js\");\n/* harmony import */ var _serviceWorker_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_serviceWorker_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _js_store_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/store.js */ \"./src/js/store.js\");\n/* harmony import */ var _js_store_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_js_store_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _js_game_map1_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js/game-map1.js */ \"./src/js/game-map1.js\");\n/* harmony import */ var _js_game_map1_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_js_game_map1_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _js_pokecenter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./js/pokecenter.js */ \"./src/js/pokecenter.js\");\n/* harmony import */ var _js_pokecenter_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_js_pokecenter_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _js_pokemarkt_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./js/pokemarkt.js */ \"./src/js/pokemarkt.js\");\n/* harmony import */ var _js_pokemarkt_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_js_pokemarkt_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _js_pokedex_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./js/pokedex.js */ \"./src/js/pokedex.js\");\n/* harmony import */ var _js_pokedex_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_js_pokedex_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _js_catchedPokemon_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./js/catchedPokemon.js */ \"./src/js/catchedPokemon.js\");\n/* harmony import */ var _js_catchedPokemon_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_js_catchedPokemon_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _js_script_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./js/script.js */ \"./src/js/script.js\");\n/* harmony import */ var _js_script_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_js_script_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _js_battle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./js/battle.js */ \"./src/js/battle.js\");\n/* harmony import */ var _js_battle_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_js_battle_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _scss_style_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./scss/style.scss */ \"./src/scss/style.scss\");\n\n\n\n\n\n\n\n\n\n\n\n\nfunction init() {\n    checkServiceWorker();\n}\n\nfunction checkServiceWorker() {\n    if(\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.register(\"/Pokemon/serviceWorker.js\", { scope: \"/Pokemon/\"})\n        .then(()=>  console.log('ServiceWorker geladen'))\n        .catch((error) => console.warn(error))\n    }\n}\n\n\n//# sourceURL=webpack://project-template/./src/index.js?");

/***/ }),

/***/ "./src/js/battle.js":
/*!**************************!*\
  !*** ./src/js/battle.js ***!
  \**************************/
/***/ (() => {

eval("//######################################################\n// Variablen\n//######################################################\nlet currentWildPokemon;\nlet myCurrentPokemon;\nlet wildPokeImage = document.getElementById('imgPoke');\nlet wildPokeName = document.getElementById('wildPokeName');\nlet myPokeImage = document.getElementById('imgMyPoke');\nlet myPokeName = document.getElementById('myPokeName');\nlet wildPokemonProgress = document.getElementById('wildPokemonProgress');\nlet myPokemonProgress = document.getElementById('myPokemonProgress');\nlet myPokemonXPProgress = document.getElementById('myPokemonXPProgress');\nlet infoBox = document.getElementById('infoBox');\nlet moveButtons = document.getElementById('moveButtonCont');\nlet mainButtons = document.getElementById('mainButtonCont');\nlet myCatchedPokemons = [];\nlet myTeam = [];\nlet allMoves = [];\nlet facedPokemons = [];\nlet pokeMove;\nlet currentAttack;\nlet currentWildPokeHP;\nlet myCurrentPokemonHP;\nlet myCurrentPokemonStaticHP;\nlet fightRate = 0;\nlet iamExecuting = false;\nlet myPokeballAmount = 35;\nlet todayPokemons = []; // 20 Pokemon werden random mäßig erstellt\nconst maxPokemon = 898;\n\nlet is_trainerBattle = false;\nlet trainerBattle_round = 1;\n\n\nconst pokemonGenerationen = {\n    gen1: {\n        start: 1,\n        end: 150,\n    },\n    gen2: {\n        start: 152,\n        end: 251,\n    },\n    gen3: {\n        start: 252,\n        end: 386,\n    },\n    gen4: {\n        start: 387,\n        end: 493,\n    },\n    gen5: {\n        start: 494,\n        end: 649,\n    },\n    gen6: {\n        start: 650,\n        end: 721,\n    },\n    gen7: {\n        start: 722,\n        end: 809,\n    },\n    gen8: {\n        start: 810,\n        end: 905,\n    },\n    all: {\n        start: 1,\n        end: 905,\n    },\n};\n\nlet myCurrentPokemonIndex = 0;\nlet variableMoveName = false;\nlet isHealing = false;\nlet avarageLevel = 0;\n\nconst pokeball = document.getElementById('pokeball');\nconst mainButton1 = document.getElementById('mainButton1');\nconst btnAttack0 = document.getElementById('btnAttack0');\nconst btnAttack1 = document.getElementById('btnAttack1');\nconst btnAttack2 = document.getElementById('btnAttack2');\nconst btnAttack3 = document.getElementById('btnAttack3');\nconst throwPokeball = document.getElementById('mainButton2');\nconst btn_closeActionwindow = document.getElementById('btn_closeActionwindow');\n\nconst pokemon1 = document.getElementById('teamPoke_0');\nconst pokemon2 = document.getElementById('teamPoke_1');\nconst pokemon3 = document.getElementById('teamPoke_2');\nconst pokemon4 = document.getElementById('teamPoke_3');\nconst outpPokeball = document.getElementById('outpPokeball');\nconst img_Animat = document.getElementById('img_Animat');\nconst wildPkeBattleCard = document.getElementById('wildPkeBattleCard');\nconst myPkeBattleCard = document.getElementById('myPkeBattleCard');\nconst itemButtons = document.querySelectorAll('.itemButton');\nconst trainer_battleCounter = document.getElementById(\"lbl_trainer_battle_counter\")\n\n\nlet save_Object = {\n    today_Date: '',\n    myPokemonTeam: [],\n    myCatchedPokemons: [],\n    allFacedPokemons: [],\n    allPokemonMoves: [],\n    today_Pokemons: [],\n    items: {\n        pokeballs: 60,\n        money: 100,\n        beleber: 5,\n        trank: 5,\n        bonbon: 3,\n    },\n    gen: 'all',\n    sound: true\n};\n\n\n\nif (mainButton1) {\n    mainButton1.addEventListener('click', () => {\n        pokeFight();\n    });\n}\n\nif (btnAttack0) {\n    btnAttack0.addEventListener('click', () => {\n        fightRate++;\n        const btnMoveName = btnAttack0.innerText;\n        attackAction(btnMoveName);\n    });\n}\n\nif (btnAttack1) {\n    btnAttack1.addEventListener('click', () => {\n        fightRate++;\n        const btnMoveName = btnAttack1.innerText;\n        attackAction(btnMoveName);\n    });\n}\n\nif (btnAttack2) {\n    btnAttack2.addEventListener('click', () => {\n        fightRate++;\n        const btnMoveName = btnAttack2.innerText;\n        attackAction(btnMoveName);\n    });\n}\n\nif (btnAttack3) {\n    btnAttack3.addEventListener('click', () => {\n        fightRate++;\n        const btnMoveName = btnAttack3.innerText;\n        attackAction(btnMoveName);\n    });\n}\n\n// Werfe Pokeball\nif (throwPokeball) {\n    throwPokeball.addEventListener('click', () => {\n        if (myCurrentPokemonHP > 0) {\n            catchPokemon();\n        }\n    });\n}\n\nif (btn_closeActionwindow) {\n    btn_closeActionwindow.addEventListener('click', () => {\n        moveButtons.hidden = true;\n        mainButtons.hidden = false;\n    });\n}\n\n//######################################################\n// Klassen\n//######################################################\nclass Pokemon {\n    constructor(\n        id,\n        name,\n        type,\n        level,\n        allMoves,\n        moves,\n        spriteFront,\n        spriteBack,\n        statAttack,\n        statDefense,\n        specialDefense,\n        xp,\n        hp,\n        maxHp,\n        unique_ID,\n    ) {\n        this.id = id;\n        this.name = name;\n        this.type = type;\n        this.level = level;\n        this.allMoves = allMoves;\n        this.moves = moves;\n        this.spriteFront = spriteFront;\n        this.spriteBack = spriteBack;\n        this.statAttack = statAttack;\n        this.statDefense = statDefense;\n        this.specialDefense = specialDefense;\n        this.xp = xp;\n        this.hp = hp;\n        this.maxHp = maxHp;\n        this.unique_ID = uniqueID_Generator();\n    }\n    isDefeated = false;\n}\n\nclass PokeMove {\n    constructor(\n        name,\n        germanName,\n        descr,\n        accuracy,\n        baseDamage,\n        minHits,\n        maxHits,\n        pp,\n        type,\n        healing,\n    ) {\n        (this.name = name),\n            (this.germanName = germanName),\n            (this.descr = descr),\n            (this.accuracy = accuracy),\n            (this.baseDamage = baseDamage),\n            (this.minHits = minHits),\n            (this.maxHits = maxHits),\n            (this.pp = pp),\n            (this.type = type);\n        this.healing = healing;\n    }\n}\n\nlet myStaticPokemon = new Pokemon(\n    6,\n    'Charizard',\n    'fire',\n    8,\n    'mega-punch',\n    'mega-punch',\n    'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png',\n    'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/6.png',\n    84,\n    78,\n    0,\n    78,\n);\n\nwindow.onload = init();\n\nfunction init() {\n    // Check first if battle window is open\n    if (document.getElementById('battleTag')) {\n        load_SaveObj();\n        if(is_trainerBattle === false) {\n            generate_today_Pokemons();\n            myPokemonProgress.value = 100;\n            wildPokemonProgress.value = 100;\n            createMyFirstPokemon();\n            renderItems();\n        }else {\n            generate_today_Pokemons();\n            myPokemonProgress.value = 100;\n            wildPokemonProgress.value = 100;\n            createMyFirstPokemon();\n            renderItems();\n            document.getElementById('battleTag').classList.add('trainer-battle-container')\n            //trainerBattle_round++;\n            document.getElementById(\"mainButton2\").style.display = 'none';\n            trainer_battleCounter.classList.add('active');\n\n            try {\n                if(is_trainerBattle === true) {\n                    trainerBattle_round =  JSON.parse(localStorage.getItem('stored_battlecounter'));\n                    console.log('loaded trainerBattle_round', trainerBattle_round);\n                    trainer_battleCounter.innerHTML = `${trainerBattle_round}/3`;\n                }\n            } catch (error) {\n                console.log('stored_battlecounter ', error);\n            }\n        }\n\n\n    }\n}\n\nfunction load_SaveObj() {\n    if (localStorage.getItem('stored_save_Object') != null) {\n        save_Object = JSON.parse(localStorage.getItem('stored_save_Object'));\n        facedPokemons = save_Object.allFacedPokemons;\n        allMoves = save_Object.allPokemonMoves;\n        myTeam = save_Object.myPokemonTeam;\n\n        if(save_Object.lastLocation === 'pokegym') {\n            is_trainerBattle = true;\n        }else {\n            is_trainerBattle = false;\n        }\n        try {\n            if (save_Object.allFacedPokemons.length === 0) {\n                createMyStarterPokemon();\n                createMyFirstPokemon();\n            }\n            loadMyTeam();\n            myPokeballAmount = save_Object.items.pokeballs;\n            outpPokeball.innerHTML = myPokeballAmount;\n            console.log('3');\n        } catch (error) {\n            console.warn('Team konnte nicht angezeigt werden: ', error);\n        }\n    } else {\n        createMyStarterPokemon();\n        createMyFirstPokemon();\n    }\n}\n\n//######################################################\n// Statisches Pokemon\n//######################################################\nfunction createMyStarterPokemon() {\n    // Statisches Pokemon -- Arcanine\n    myStaticPokemon = new Pokemon(\n        59,\n        'Arcanine',\n        'fire',\n        4,\n        [\n            'headbutt',\n            'body-slam',\n            'take-down',\n            'double-edge',\n            'leer',\n            'bite',\n            'roar',\n            'ember',\n            'flamethrower',\n            'hyper-beam',\n            'strength',\n            'solar-beam',\n            'dragon-rage',\n            'fire-spin',\n            'dig',\n            'toxic',\n            'agility',\n            'rage',\n            'teleport',\n            'mimic',\n            'double-team',\n            'reflect',\n            'bide',\n            'fire-blast',\n            'swift',\n            'skull-bash',\n            'rest',\n            'substitute',\n            'thief',\n            'flame-wheel',\n            'snore',\n            'curse',\n            'reversal',\n            'protect',\n            'scary-face',\n            'mud-slap',\n            'outrage',\n            'endure',\n            'swagger',\n            'attract',\n            'sleep-talk',\n            'return',\n            'frustration',\n            'safeguard',\n            'dragon-breath',\n            'iron-tail',\n            'hidden-power',\n            'sunny-day',\n            'crunch',\n            'extreme-speed',\n            'rock-smash',\n            'heat-wave',\n            'will-o-wisp',\n            'facade',\n            'helping-hand',\n            'superpower',\n            'secret-power',\n            'hyper-voice',\n            'overheat',\n            'odor-sleuth',\n            'aerial-ace',\n            'howl',\n            'covet',\n            'natural-gift',\n            'close-combat',\n            'flare-blitz',\n            'dragon-pulse',\n            'giga-impact',\n            'thunder-fang',\n            'fire-fang',\n            'rock-climb',\n            'iron-head',\n            'captivate',\n            'flame-charge',\n            'round',\n            'incinerate',\n            'retaliate',\n            'bulldoze',\n            'wild-charge',\n            'snarl',\n            'play-rough',\n            'confide',\n            'laser-focus',\n            'burn-up',\n            'psychic-fangs',\n            'scorching-sands',\n        ],\n        ['will-o-wisp', 'hidden-power', 'thief', 'giga-impact', 'teleport'],\n        'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/59.png',\n        'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/59.png',\n        110,\n        80,\n        70,\n        399,\n        90,\n        90,\n        'rabdomVal123',\n    );\n\n    myStaticPokemon.catchval = {\n        catchLevel: 4,\n        catchDate: createDateFromToday(),\n        catchName: 'Arcanine'\n    },\n        save_Object.myPokemonTeam.push(myStaticPokemon);\n    save_Object.myCatchedPokemons.push(myStaticPokemon);\n    save_SaveObj();\n    createMyPokemon();\n}\n\nfunction createMyFirstPokemon() {\n    let nextAvailablePokemon = 0;\n    for (let i = 0; i < myTeam.length; i++) {\n        if (myTeam[i].isDefeated === false) {\n            nextAvailablePokemon = i;\n            break;\n        }\n    }\n    try {\n        const choosenPokemon = myTeam[nextAvailablePokemon];\n        if (choosenPokemon.isDefeated === false) {\n            myCurrentPokemonIndex = nextAvailablePokemon;\n            chooseNewPokemon(choosenPokemon);\n            showInfoBox(\n                `Los ${makeFirstLetterBig(\n                    choosenPokemon.name,\n                )}. Du schaffst das`,\n            );\n        } else {\n            alert(\n                'Ein besiegtes Pokemon kann nicht in den Kampf geschickt werden',\n            );\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nfunction save_SaveObj() {\n    localStorage.setItem('stored_save_Object', JSON.stringify(save_Object));\n    console.log('SaveObj', save_Object);\n}\n\n//myPokemonTeam\nfunction loadMyTeam() {\n    let levelSum = 0;\n    for (let i = 0; i < myTeam.length; i++) {\n        document.getElementById(`teamPoke_${i}`).src = myTeam[i].spriteFront;\n        document.getElementById(`teamPokeName_${i}`).innerHTML = makeFirstLetterBig(myTeam[i].name)\n        let hpInPercentx = myTeam[i].hp * 100 / myTeam[i].maxHp\n        document.getElementById(`teamPokeProgress_${i}`).value = hpInPercentx\n        levelSum = levelSum += myTeam[i].level;\n        if (myTeam[i].isDefeated === true) {\n            document.getElementById(`teamPoke_${i}`).classList.add('defeat');\n        }\n    }\n    // Durchschnittslevel berechnen\n    avarageLevel = parseInt(levelSum / myTeam.length);\n}\n\n// Funktion erstellt zufällig 25 Pokemon. Diese sollen für einen Tag abgespeichert\n// werden und die möglichen Pokemon bildem, denen man begegnen kann\n\nfunction generate_today_Pokemons() {\n    if (today_equal_savedDay() === true) {\n        todayPokemons = save_Object.today_Pokemons;\n        createWildPokemon();\n    } else {\n        let min = 1;\n        let max = 850;\n        // Try to set the selected generation\n        try {\n            const savedGen = save_Object.gen;\n            const genRange = pokemonGenerationen[savedGen];\n            min = genRange.start;\n            max = genRange.end;\n        } catch (error) {\n            console.warn('Gen Error: ', error);\n        }\n\n        for (let i = 1; i <= 30; i++) {\n            const randomPokemon = Math.floor(Math.random() * max) + min;\n            todayPokemons.push(randomPokemon);\n        }\n        save_Object.today_Pokemons = todayPokemons;\n        save_Object.today_Date = createDateFromToday();\n        save_SaveObj();\n        createWildPokemon();\n    }\n}\n\n\nfunction today_equal_savedDay() {\n    const checkDay = save_Object.today_Date;\n    const today = createDateFromToday();\n\n    if (checkDay === today) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction createDateFromToday() {\n    const date = new Date();\n    const day = addZero(date.getDate());\n    const month = addZero(date.getMonth() + 1);\n    const year = date.getFullYear();\n    const today = `${day}.${month}.${year}`;\n    return today;\n}\n\nfunction addZero(val) {\n    if (val < 10) {\n        val = `0${val}`;\n    }\n    return val;\n}\n\nfunction currentRandomPokemon() {\n    const randomPokemon = parseInt(Math.random() * todayPokemons.length + 1);\n    fetchPokemon(todayPokemons[randomPokemon]);\n}\n\nfunction uniqueID_Generator() {\n    const rndStuff = [\n        'A',\n        'B',\n        'C',\n        'D',\n        'E',\n        'F',\n        'G',\n        'H',\n        'I',\n        'J',\n        'K',\n        'L',\n        'M',\n        'N',\n        'O',\n        'P',\n        'Q',\n        'R',\n        'S',\n        'T',\n        'U',\n        'V',\n        'W',\n        'X',\n        'Y',\n        'Z',\n        '$',\n        '!',\n        '1',\n        '2',\n        '3',\n        '4',\n        '8',\n        '7',\n        '6',\n        '5',\n        '9',\n        '0',\n        '#',\n    ];\n    let key = '';\n    for (let i = 1; i <= 36; i++) {\n        key += rndStuff[parseInt(Math.random() * rndStuff.length)];\n    }\n    return key;\n}\n\n//######################################################\n// Mein Pokemon rendern\n//######################################################\nfunction createMyPokemon() {\n    myPokeImage.src = myStaticPokemon.spriteBack;\n    myCurrentPokemonHP = myStaticPokemon.hp;\n    myCurrentPokemonStaticHP = myStaticPokemon.maxHp;\n    myPokeName.innerHTML = `${makeFirstLetterBig(myStaticPokemon.name)} | Lv.${myStaticPokemon.level\n        } | KP.${myStaticPokemon.hp}`;\n    console.log('MyCreated', myStaticPokemon);\n}\n\n//######################################################\n// Erstellt Zufallszahl und checkt, ob ID bereits im Array FacedPokemons gespeichert ist,\n// wenn nein, Fetch Request an Poke API\n//######################################################\n\nfunction createWildPokemon() {\n    let randomPokemon = parseInt(Math.random() * todayPokemons.length);\n    randomPokemon = todayPokemons[randomPokemon];\n    let foundIdInFacedPokemonArray = false;\n    // ? Checke FacedPokemon Array\n    console.log('facedPokemons', facedPokemons);\n    for (let i = 0; i < facedPokemons.length; i++) {\n        if (randomPokemon === facedPokemons[i].id) {\n            const all_moves = facedPokemons[i].allMoves;\n            let four_moves = [];\n            for (let i = 0; i <= 4; i++) {\n                const randomMove =\n                    Math.floor(Math.random() * all_moves.length + 1);\n                four_moves.push(all_moves[randomMove]);\n            }\n            currentWildPokemon = new Pokemon(\n                facedPokemons[i].id,\n                makeFirstLetterBig(facedPokemons[i].name),\n                facedPokemons[i].type,\n                parseInt(Math.random() * avarageLevel) + 3,\n                facedPokemons[i].allMoves,\n                four_moves,\n                facedPokemons[i].spriteFront,\n                facedPokemons[i].spriteBack,\n                facedPokemons[i].statAttack,\n                facedPokemons[i].statDefense,\n                facedPokemons[i].specialDefense,\n                facedPokemons[i].xp,\n                facedPokemons[i].hp,\n                facedPokemons[i].maxHp,\n            );\n\n            //ANCHOR -  Trainer Pokemon\n            if(is_trainerBattle === true) {\n                create_trainer_pokemon();\n            }\n        \n            wildPokeImage.src = currentWildPokemon.spriteFront;\n            // wildPokeImage.style.opacity = \"1\";\n            wildPokeName.innerHTML = `${makeFirstLetterBig(\n                currentWildPokemon.name,\n            )} | Lv. ${currentWildPokemon.level} | KP.${currentWildPokemon.hp\n                }`;\n            currentWildPokeHP = currentWildPokemon.hp;\n            console.log('Found Pokemon in FacedPokemons', currentWildPokemon);\n            foundIdInFacedPokemonArray = true;\n            break;\n        }\n    }\n\n    // Pokemon nicht im Array facedPokemons enthalten, also Fetch Req\n    if (foundIdInFacedPokemonArray === false) {\n        console.log('Nicht gefunden also fetchPokemon mit ID ', randomPokemon);\n        fetchPokemon(randomPokemon);\n    }\n}\n\n//######################################################\n// Fetch Request an Poke API. Kann mittels ID oder Name übergeben werden\n//######################################################\n\nfunction fetchPokemon(id) {\n    fetch(`https://pokeapi.co/api/v2/pokemon/${id}/`)\n        .then((res) => res.json())\n        .then((data) => {\n            console.log('data', data);\n            let x_moves = [];\n            for (let i = 0; i < data.moves.length; i++) {\n                x_moves.push(data.moves[i].move.name);\n            }\n            let four_moves = [];\n            for (let i = 0; i <= 4; i++) {\n                const randomMove =\n                    Math.floor(Math.random() * (data.moves.length - 1)) + 1;\n                four_moves.push(data.moves[randomMove].move.name);\n            }\n            currentWildPokemon = new Pokemon(\n                data.id,\n                data.name,\n                data.types[0].type.name,\n                parseInt(Math.random() * avarageLevel) + 3,\n                x_moves,\n                four_moves,\n                data.sprites.front_default,\n                data.sprites.back_default,\n                data.stats[1].base_stat,\n                data.stats[2].base_stat,\n                data.stats[4].base_stat,\n                data.base_experience,\n                data.stats[0].base_stat,\n                data.stats[0].base_stat,\n            );\n    \n            //ANCHOR -  Trainer Pokemon\n            if(is_trainerBattle === true) {\n                create_trainer_pokemon();\n            }\n            // Wildes Pokemon rendern\n            wildPokeImage.src = currentWildPokemon.spriteFront;\n            wildPokeImage.style.opacity = '1';\n            wildPokeName.innerHTML = `${makeFirstLetterBig(\n                currentWildPokemon.name,\n            )} | Lv. ${currentWildPokemon.level}| KP.${currentWildPokemon.hp\n                }`;\n            currentWildPokeHP = currentWildPokemon.hp;\n            showInfoBox(\n                `Ein wildes ${makeFirstLetterBig(\n                    currentWildPokemon.name,\n                )} erscheint`,\n            );\n            // Pokemon auf dem Gerät abspeichern, um beim nächsten mal keinen erneuten Fetch Request auszulösen\n            save_Object.allFacedPokemons.push(currentWildPokemon);\n            save_SaveObj();\n        })\n        .catch((error) => {\n            console.warn(error);\n            createWildPokemon();\n        });\n}\n\nfunction create_trainer_pokemon() {\n    currentWildPokemon.level = (avarageLevel + 45);\n    currentWildPokemon.statAttack = currentWildPokemon.statAttack + 45;\n    currentWildPokemon.statDefense = currentWildPokemon.statDefense + 45;\n    currentWildPokemon.maxHp = currentWildPokemon.maxHp + 45;\n    currentWildPokemon.hp = currentWildPokemon.hp + 45;\n}\n\n//######################################################\n// Wichtige Informationen einer Attacke fetchen und ganze Attacke abspeichern\n//######################################################\nfunction fetchAttack(nameId) {\n    fetch(`https://pokeapi.co/api/v2/move/${nameId}/`)\n        .then((res) => res.json())\n        .then((data) => {\n            console.log('Move', data);\n            pokeMove = new PokeMove(\n                data.name,\n                data.names[4].name,\n                0,\n                data.accuracy,\n                data.power,\n                data.meta.minHits,\n                data.meta.maxHits,\n                data.pp,\n                data.type.name,\n                data.meta.healing,\n            );\n            // In alle Attacken abspeichern\n            save_Object.allPokemonMoves.push(pokeMove);\n            allMoves.push(pokeMove);\n            save_SaveObj();\n        });\n}\n\n//######################################################\n\n//######################################################\nfunction init_Move(moveName) {\n    let foundMoveInAllMoves = false;\n    // Checke Attacke im Attacken Array\n    for (let i = 0; i < allMoves.length; i++) {\n        if (moveName === allMoves[i].name) {\n            currentAttack = new PokeMove(\n                allMoves[i].name,\n                allMoves[i].germanName,\n                0,\n                allMoves[i].accuracy,\n                allMoves[i].baseDamage,\n                allMoves[i].minHits,\n                allMoves[i].maxHits,\n                allMoves[i].pp,\n                allMoves[i].type,\n                allMoves[i].healing,\n            );\n            console.log('GeladenMove:', allMoves);\n            foundMoveInAllMoves = true;\n            pokeMove = currentAttack;\n        }\n    }\n\n    if (foundMoveInAllMoves === false) {\n        fetchAttack(moveName);\n    }\n\n    setTimeout(() => {\n        myPokemonAttack('myPokemon');\n    }, 1000);\n}\n\n//######################################################\n// Quelle: https://www.pokewiki.de/Schaden\n// Formel für Schadensberechnung\n// Schaden=⌊((Level⋅25+2)⋅Basisschaden⋅(Sp.) Angr.50⋅(Sp.) Vert.⋅F1+2)⋅Volltreffer⋅F2⋅Z100⋅STAB⋅Typ1⋅Typ2⋅F3⌋\n//!!!!!\n// Schaden = ((angriffPokeLevel * 40% + 2) * baseDamage * (angriffstatAttack / 50 + VertPokestatDefense) * 1 + 2) * Volltreffer * F2 * (Z / 100) * 1.5 * Typverrechnung\n// [((lv 25 * 40% + 2) * tackle=40 (Glurak Angr 84 / 50 + Magneton Vert 95) * 3) * 1,1 * (95 / 100) * 1,5] *  WertAusTypvergl=FeuerVsElektro=1\n// ((12) * 40 * (0,58) * 3)) * 1,1 * (0,95) * 1,5 * 1 = 1.309\n//!!!!!\n// Level gibt das aktuelle Level des Angreifers an und kann dementsprechend zwischen 1 und 100 variieren.\n// (Sp.-)Angr. gibt allgemein den Angriffs- bzw. Spezial-Angriffs-Wert des Angreifers an\n// Volltreffer ist für gewöhnlich 1 (Berechnung aus Accuracy)\n// Z ist ein Wert, der berechnet wird, indem von 100 eine zufällige Zahl zwischen 0 und 15 abgezogen wird\n// F2 zwischen 1 und 1,3\n//######################################################\nfunction myPokemonAttack(whoIsExecuting) {\n    // Initwerte sind so eingestellt, dass ein Angriff von meinem Pokemon aus geht\n    let lv = myStaticPokemon.level;\n    let defPokeLv = currentWildPokemon.level;\n    let attbaseDamage = pokeMove.baseDamage;\n    let attackVal = myStaticPokemon.statAttack;\n    let defenceVal = currentWildPokemon.statDefense;\n    let specialDefenseVal = currentWildPokemon.specialDefense;\n    const f2 = Math.random() * (1.3 - 1) + 1;\n    const z = 100 - parseInt(Math.random() * 15 + 1);\n    const healVal = pokeMove.healing;\n    console.log('healVal', healVal);\n    let attackType = pokeMove.type;\n    let defPokeType = currentWildPokemon.type;\n    const typeCalc = checkPokeTypes(attackType, defPokeType); // Typ Attacke wird mit Typ verteidigendesPokemon verglichen 0x / 0.5x / 1x / 2x --TODO: Funktion für den Vergleich bauen\n    let whoIsAffected = 'wildPokemon';\n    variableMoveName = false;\n    isHealing = false;\n\n    // Wenn wildes Pokemon angreift\n    if (whoIsExecuting === 'wildPokemon') {\n        // Wenn Basedamage = 0 soll per zufall tackle ausgeführt werden\n        if (attbaseDamage === null && randomize()) {\n            attackType = 'normal';\n            attbaseDamage = 50;\n            variableMoveName = true;\n        }\n\n        lv = currentWildPokemon.level;\n        defPokeLv = myStaticPokemon.level;\n        attackVal = currentWildPokemon.statAttack;\n        defenceVal = myStaticPokemon.statDefense;\n        specialDefenseVal = myStaticPokemon.specialDefense;\n        defPokeType = myStaticPokemon.type;\n        whoIsAffected = 'myPokemon';\n    } else {\n    }\n\n    // Grundsätzliche Berechnung des Schadens\n    // Am 13.12 abgeändert, (lv * 0.4_Auf_0,2 + 2)\n    const rawDamage =\n        (lv * 0.2 + 2) *\n        attbaseDamage *\n        (attackVal / (defenceVal + 50 + defPokeLv + specialDefenseVal)) *\n        3 *\n        f2 *\n        (z / 100);\n\n    const damage = parseInt((rawDamage * typeCalc) / 20);\n\n    //Todo:  Wenn Heil Move verwendet\n    if (healVal != undefined && healVal > 0) {\n        isHealing = true;\n    }\n\n    // Wenn wildes Pokemon am Zug ist\n    if (whoIsExecuting === 'wildPokemon') {\n        myCurrentPokemonHP -= damage;\n        if (damage > 0) {\n            myPokeImage.classList.add('getAttacked');\n            setTimeout(() => {\n                myPokeImage.classList.remove('getAttacked');\n            }, 600);\n        }\n    } else {\n        currentWildPokeHP -= damage;\n        if (damage > 0) {\n            img_Animat.classList.add('active');\n            setTimeout(() => {\n                img_Animat.classList.remove('active');\n            }, 300);\n            wildPokeImage.classList.add('getAttacked');\n            setTimeout(() => {\n                wildPokeImage.classList.remove('getAttacked');\n            }, 600);\n        }\n    }\n    animateProgressBar(damage, whoIsAffected, healVal);\n}\n\n//######################################################\n\n//######################################################\nfunction animateProgressBar(damage, whoIsAffected, healVal) {\n    let fullHP = currentWildPokemon.maxHp;\n    let currentHP = currentWildPokeHP;\n    let oldHPInPercent = parseInt(((currentHP + damage) *100 ) / fullHP)\n    let hpInPercent = parseInt((currentHP * 100) / fullHP);\n    let effectedImage = wildPokeImage;\n    let effectedPokeName = wildPokeName;\n    let effectedProgressbar = wildPokemonProgress;\n    let atackerPokemon = myStaticPokemon;\n    let defenderPokemon = currentWildPokemon;\n    let hp_in_percent_val = oldHPInPercent;\n\n\n    if (whoIsAffected === 'myPokemon') {\n        fullHP = myCurrentPokemonStaticHP;\n        currentHP = myCurrentPokemonHP;\n        oldHPInPercent = parseInt(((currentHP + damage) * 100 ) / fullHP)\n        hp_in_percent_val = oldHPInPercent;\n        hpInPercent = parseInt((currentHP * 100) / fullHP);\n        effectedImage = myPokeImage;\n        effectedPokeName = myPokeName;\n        effectedProgressbar = myPokemonProgress;\n        atackerPokemon = currentWildPokemon;\n        defenderPokemon = myStaticPokemon;\n        document.getElementById(`teamPokeProgress_${myCurrentPokemonIndex}`).value = hpInPercent\n    }\n\n//!############################################################\n// Inner Function to descrease the prgress bar slowly\n//!############################################################\n\n                    hp_in_percent_val = oldHPInPercent;\n                    let intv = undefined;\n\n                    function initUpcountingTemp(decreacingKp) {\n                        hp_in_percent_val = oldHPInPercent;\n                        intv = setInterval(function () { countingUp(decreacingKp); }, 20);\n                    }\n\n                    function countingUp(decreacingKp) {\n                        hp_in_percent_val--;\n                        if (hp_in_percent_val === decreacingKp) {\n                            clearInterval(intv);\n                            hp_in_percent_val = decreacingKp;\n                        }\n                        effectedProgressbar.value = hp_in_percent_val;\n                    }\n\n//!############################################################\n\n    // Balken anzeigen\n    if (hpInPercent <= 0) {\n        initUpcountingTemp(0)\n    } else {\n        if (damage > 0) {\n        initUpcountingTemp(hpInPercent)\n        }\n    }\n\n    // Auswirkungsanzeige\n    setTimeout(() => {\n        // Textbox\n        if (hpInPercent <= 0) {\n            // Textbox\n            showInfoBox(\n                `${makeFirstLetterBig(defenderPokemon.name)} wurde besiegt`,\n            );\n            // Besiegtes Pokemon verschwindet\n            effectedImage.classList.add('getDestroyed');\n\n            setTimeout(() => {\n                effectedImage.style.opacity = '0';\n                effectedPokeName.innerHTML = '';\n                if (whoIsAffected === 'myPokemon') {\n                    myPokemonXPProgress.style.width = '0%';\n                    save_Object.myPokemonTeam[myCurrentPokemonIndex].isDefeated = true;\n                    document.getElementById(`teamPokeProgress_${myCurrentPokemonIndex}`).value = hpInPercent\n                    document.getElementById(`teamPoke_${myCurrentPokemonIndex}`).classList.add('defeat');\n                    save_SaveObj();\n                    check_if_all_defeated();\n                }\n            }, 400);\n        } else {\n\n            if (variableMoveName === false) {\n                showInfoBox(\n                    `${makeFirstLetterBig(\n                        atackerPokemon.name,\n                    )} führt \"${makeFirstLetterBig(\n                        pokeMove.name,\n                    )}\" aus und richtet ${damage} Schaden an.`,\n                );\n            } else {\n                showInfoBox(\n                    `${makeFirstLetterBig(\n                        atackerPokemon.name,\n                    )} führt \"Tackle\" aus und richtet ${damage} Schaden an.`,\n                );\n            }\n\n            effectedPokeName.innerHTML = `${makeFirstLetterBig(\n                defenderPokemon.name,\n            )} | Lv. ${defenderPokemon.level} | KP.${currentHP}`;\n        }\n    }, 3000);\n\n    setTimeout(() => {\n        checkWhoExecuteNext();\n    }, 3100);\n}\n\n\n//######################################################\n\n// Gameloop\nfunction checkWhoExecuteNext() {\n    if (iamExecuting === true) {\n        enableMainButtons();\n        iamExecuting = false;\n        wildPkeBattleCard.classList.remove('active');\n        myPkeBattleCard.classList.add('active');\n    } else {\n        disableMainButtons();\n        ki_Move();\n        iamExecuting = true;\n        myPkeBattleCard.classList.remove('active');\n        wildPkeBattleCard.classList.add('active');\n    }\n}\n\n\n\n//######################################################\n\nfunction ki_Move() {\n    if (currentWildPokeHP > 0) {\n        const randomMove = parseInt(\n            Math.random() * currentWildPokemon.moves.length,\n        );\n        const move = currentWildPokemon.moves[randomMove];\n        fetchAttack(move);\n        setTimeout(() => {\n            myPokemonAttack('wildPokemon');\n        }, 3000);\n    } else {\n        //? Battle Szene endet hier\n        save_Object.myPokemonTeam[myCurrentPokemonIndex].hp = myCurrentPokemonHP;\n        // Speichert pro Sieg einen Geldbetrag wild pokemon lv / 2 Todo später verringern\n        save_Object.items.money += parseInt(currentWildPokemon.level / 2);\n        level_up();\n        setTimeout(() => {\n            if(is_trainerBattle === true && trainerBattle_round < 3) {\n                trainerBattle_round++;\n\n                if(trainerBattle_round === 4) {\n                    alert('Klasse, du hast den Trainer besiegt. Du gewinnst 5 Pokebälle und 2 Supertränke');\n                    save_Object.items.pokeballs += 5;\n                    save_Object.items.trank += 5;\n                    save_SaveObj();\n                    trainerBattle_round = 1;\n                }\n                localStorage.setItem('stored_battlecounter', JSON.stringify(trainerBattle_round));\n            }\n            window.location.reload();\n        }, 3000);\n    }\n}\n\n//######################################################\n// Wildes Pokemon fangen\n//######################################################\n\n// function simulateCatchQuote() {\n\n//     let catched = []\n//     for(let i = 1; i < 1000; i++) {\n//         const fullHP = currentWildPokemon.maxHp;\n//         const current_HP = currentWildPokemon.hp\n//         const hpInPercent = parseInt((currentWildPokeHP * 100) / fullHP);\n//         const catchquote = 50 - parseInt(Math.random() * (hpInPercent + 10));\n//         if(catchquote >=25) {\n//             catched.push(catchquote)\n//         }\n//     }\n//     const catchPercent = catched.length * 100 / 1000\n//     alert(`Von 1000x wäre das Pokemon ${catched.length}x gefangen worden. Fangquote in % = ${catchPercent}`, catched);\n// }\n\nfunction catchPokemon() {\n    // Abfragen, ob man noch Pokebälle hat\n    if (myPokeballAmount > 0) {\n        myPokeballAmount--;\n        save_Object.items.pokeballs = myPokeballAmount;\n        save_SaveObj();\n        outpPokeball.innerHTML = myPokeballAmount;\n        pokeball.classList.add('active');\n        setTimeout(() => {\n            pokeball.classList.remove('active');\n            // const fullHP = currentWildPokemon.hp;\n            const fullHP = currentWildPokemon.maxHp;\n            const current_HP = currentWildPokemon.hp\n            const hpInPercent = parseInt((currentWildPokeHP * 100) / fullHP);\n            const catchquote = 50 - parseInt(Math.random() * (hpInPercent + 10));\n            if (catchquote >= 25) {\n                // Unsichtbar machen\n                wildPokeImage.style.opacity = '0';\n                wildPokeName.innerHTML = '';\n                showInfoBox(\n                    `${makeFirstLetterBig(\n                        currentWildPokemon.name,\n                    )} wurde gefangen`,\n                );\n                save_Object.myPokemonTeam[myCurrentPokemonIndex].hp = myCurrentPokemonHP;\n                level_up();\n\n                currentWildPokemon.catchval = {\n                    catchLevel: currentWildPokemon.level,\n                    catchDate: save_Object.today_Date,\n                    catchName: currentWildPokemon.name\n                }\n\n                save_Object.myCatchedPokemons.push(currentWildPokemon);\n                save_SaveObj();\n                setTimeout(() => {\n                    showInfoBox(`${myStaticPokemon.name} erhält 20xp`);\n                    // window.location.reload();\n                    window.location.reload();\n                }, 1000);\n            } else {\n                showInfoBox(\n                    `${makeFirstLetterBig(\n                        currentWildPokemon.name,\n                    )} lässt sich nicht fangen`,\n                );\n                checkWhoExecuteNext();\n            }\n        }, 1500);\n    } else {\n        showInfoBox(`Nicht genug Pokebälle`);\n    }\n}\n\n//######################################################\n// Macht den Anfangsbuchstaben groß\n//######################################################\nfunction makeFirstLetterBig(word) {\n    const firstLetter = word[0];\n    let exportword = firstLetter.toUpperCase();\n    for (let i = 1; i < word.length; i++) {\n        exportword += word[i];\n    }\n    return exportword;\n}\n\nfunction makeFirstLetterSmall(word) {\n    const firstLetter = word[0];\n    let exportword = firstLetter.toLowerCase();\n    for (let i = 1; i < word.length; i++) {\n        exportword += word[i];\n    }\n    return exportword;\n}\n\n\n\n//######################################################\n// UI Elemente\n//######################################################\nfunction showInfoBox(text) {\n    infoBox.hidden = false;\n    infoBox.innerHTML = text;\n    setTimeout(() => {\n        infoBox.hidden = true;\n    }, 4000);\n}\n\nfunction showMainButtons() {\n    moveButtons.hidden = true;\n    mainButtons.hidden = false;\n    disableMainButtons();\n}\n\nfunction showMoveButtons() {\n    moveButtons.hidden = false;\n    mainButtons.hidden = true;\n}\n\nfunction disableMainButtons() {\n    mainButtons.style.backgroundColor = 'red';\n    document.getElementById('mainButton1').disabled = true;\n    document.getElementById('mainButton2').disabled = true;\n}\n\nfunction enableMainButtons() {\n    mainButtons.style.backgroundColor = 'rgba(0, 0, 10, 0.384)';\n    document.getElementById('mainButton1').disabled = false;\n    document.getElementById('mainButton2').disabled = false;\n}\n\n//######################################################\n// Move Steuerung\n//######################################################\nfunction pokeFight() {\n    if (myCurrentPokemonHP > 0) {\n        showMoveButtons();\n    }\n}\n\nfunction attackAction(btnMoveName) {\n    showMainButtons(btnMoveName);\n    init_Move(btnMoveName);\n}\n\n// ########################################################\n// Schicke ein anderes Pokemon in den Kampf\nif (pokemon1) {\n    pokemon1.addEventListener('click', () => {\n        try {\n            try {\n                save_Object.myPokemonTeam[myCurrentPokemonIndex].hp =\n                    myCurrentPokemonHP;\n                save_SaveObj();\n            } catch (error) {\n                console.log('Error Error', error);\n            }\n\n            const choosenPokemon = myTeam[0];\n            if (choosenPokemon.isDefeated === false) {\n                myCurrentPokemonIndex = 0;\n                chooseNewPokemon(choosenPokemon);\n                showInfoBox(\n                    `Los ${makeFirstLetterBig(\n                        choosenPokemon.name,\n                    )}. Du schaffst das`,\n                );\n                checkWhoExecuteNext();\n            } else {\n                alert(\n                    'Ein besiegtes Pokemon kann nicht in den Kampf geschickt werden',\n                );\n            }\n        } catch (error) { }\n    });\n}\n\nif (pokemon2) {\n    pokemon2.addEventListener('click', () => {\n        try {\n            try {\n                save_Object.myPokemonTeam[myCurrentPokemonIndex].hp =\n                    myCurrentPokemonHP;\n                save_SaveObj();\n            } catch (error) {\n                console.log('Error Error', error);\n            }\n            const choosenPokemon = myTeam[1];\n            if (choosenPokemon.isDefeated === false) {\n                myCurrentPokemonIndex = 1;\n                chooseNewPokemon(choosenPokemon);\n                showInfoBox(\n                    `Los ${makeFirstLetterBig(\n                        choosenPokemon.name,\n                    )}. Du schaffst das`,\n                );\n                checkWhoExecuteNext();\n            } else {\n                alert(\n                    'Ein besiegtes Pokemon kann nicht in den Kampf geschickt werden',\n                );\n            }\n        } catch (error) { }\n    });\n}\n\nif (pokemon3) {\n    pokemon3.addEventListener('click', () => {\n        try {\n            try {\n                save_Object.myPokemonTeam[myCurrentPokemonIndex].hp =\n                    myCurrentPokemonHP;\n                save_SaveObj();\n            } catch (error) {\n                console.log('Error Error', error);\n            }\n            const choosenPokemon = myTeam[2];\n            if (choosenPokemon.isDefeated === false) {\n                myCurrentPokemonIndex = 2;\n                chooseNewPokemon(choosenPokemon);\n                showInfoBox(\n                    `Los ${makeFirstLetterBig(\n                        choosenPokemon.name,\n                    )}. Du schaffst das`,\n                );\n                checkWhoExecuteNext();\n            } else {\n                alert(\n                    'Ein besiegtes Pokemon kann nicht in den Kampf geschickt werden',\n                );\n            }\n        } catch (error) { }\n    });\n}\n\nif (pokemon4) {\n    pokemon4.addEventListener('click', () => {\n        try {\n            try {\n                save_Object.myPokemonTeam[myCurrentPokemonIndex].hp =\n                    myCurrentPokemonHP;\n                save_SaveObj();\n            } catch (error) {\n                console.log('Error Error', error);\n            }\n            const choosenPokemon = myTeam[3];\n            if (choosenPokemon.isDefeated === false) {\n                myCurrentPokemonIndex = 3;\n                chooseNewPokemon(choosenPokemon);\n                showInfoBox(\n                    `Los ${makeFirstLetterBig(\n                        choosenPokemon.name,\n                    )}. Du schaffst das`,\n                );\n                checkWhoExecuteNext();\n            } else {\n                alert(\n                    'Ein besiegtes Pokemon kann nicht in den Kampf geschickt werden',\n                );\n            }\n        } catch (error) { }\n    });\n}\n\nfunction chooseNewPokemon(choosenPokemon) {\n    myStaticPokemon.id = choosenPokemon.id;\n    myStaticPokemon.name = choosenPokemon.name;\n    myStaticPokemon.src = choosenPokemon.spriteBack;\n    myStaticPokemon.type = choosenPokemon.type;\n    myStaticPokemon.level = choosenPokemon.level;\n    myStaticPokemon.moves = choosenPokemon.moves;\n    myStaticPokemon.statAttack = choosenPokemon.statAttack;\n    myStaticPokemon.statDefense = choosenPokemon.statDefense;\n    myStaticPokemon.xp = choosenPokemon.xp;\n    myStaticPokemon.hp = choosenPokemon.hp;\n    myStaticPokemon.unique_ID = choosenPokemon.unique_ID;\n    myPokeImage.src = choosenPokemon.spriteBack;\n    myCurrentPokemonHP = choosenPokemon.hp;\n    myCurrentPokemonStaticHP = choosenPokemon.maxHp;\n    myPokemonXPProgress.style.width = '10%';\n    myPokemonXPProgress.value = myStaticPokemon.xp;\n    myPokemonProgress.style.width = '30%';\n    myPokeImage.style.opacity = '1';\n    const hpInPercent = parseInt(\n        (myCurrentPokemonHP * 100) / myCurrentPokemonStaticHP,\n    );\n    myPokemonProgress.value = hpInPercent;\n    myPokeName.innerHTML = `${makeFirstLetterBig(choosenPokemon.name)} | Lv.${choosenPokemon.level\n        } | KP.${choosenPokemon.hp}`;\n    document.getElementById('windowMenu').classList.remove('active');\n    // Lade Moves\n    for (let i = 0; i <= 3; i++) {\n        document.getElementById(`btnAttack${i}`).innerText =\n            myStaticPokemon.moves[i];\n    }\n}\n\n//! ////////////////////////////////////////////////////////////////////////////////////////////////\n// function levelTest() {\n//     let enemyLevel = 50;\n//     let wildPokemon_MaxHP = 72\n//     let currentLevel = 3;\n\n//     let xpTestArray = []\n//     for(let i = 0; i < 100; i++) {\n//         currentLevel = i\n//         const theTestXP = Math.floor((enemyLevel * wildPokemon_MaxHP) / (currentLevel))\n//         xpTestArray.push(`eLv(${enemyLevel}) * wPMHP(${wildPokemon_MaxHP}) / CLv(${currentLevel}) = ${theTestXP}`)\n//     }\n//     console.warn('TestXP: ', xpTestArray);\n// }\n\n// levelTest()\n//! ////////////////////////////////////////////////////////////////////////////////////////////////\nfunction level_up() {\n    const enemyLevel = currentWildPokemon.level;\n    let currentLevel = myStaticPokemon.level;\n    const wildPokemon_MaxHP = currentWildPokemon.maxHp\n    const oldXP = myStaticPokemon.xp;\n    const calcXP = Math.floor((enemyLevel * wildPokemon_MaxHP * (fightRate + 2)) / currentLevel)\n    console.warn(`eLv(${enemyLevel}) * wPMHP(${wildPokemon_MaxHP}) / CLv(${currentLevel}) = ${calcXP}`);\n    const newXP = oldXP + calcXP;\n    let pokemonIndex = -1;\n    for (let i = 0; i < save_Object.myCatchedPokemons.length; i++) {\n        if (\n            myStaticPokemon.unique_ID ===\n            save_Object.myCatchedPokemons[i].unique_ID\n        ) {\n            pokemonIndex = i;\n            console.log('Gefunden', pokemonIndex);\n            break;\n        }\n    }\n    if (oldXP <= 400) {\n        if (newXP > 400) {\n            const newLevel = currentLevel++;\n            const levelDevideBy5 = currentLevel % 5;\n            const evolveLevel = currentLevel % 11;\n            let newAttackMessage = '';\n            let newAttackName = '';\n            //#####################################################################\n            // ? Wenn Level 5 Modulus = 0, soll neue Attacke gelernt werden\n            //#####################################################################\n            if (levelDevideBy5 === 0) {\n                levelUp_with_learn_Attack(currentLevel, pokemonIndex)\n                //#####################################################################\n                // ? Leveln inklusive Evolution !!!\n                //#####################################################################\n            } else if (evolveLevel === 0) {\n                levelUp_with_Evolving(currentLevel, pokemonIndex)\n                //#####################################################################\n                // ? Normales Leveln ohne neue Attacke zu erlernen\n                //#####################################################################\n            } else {\n                normalLevelUp(currentLevel, pokemonIndex)\n            }\n        } else {\n            save_Object.myPokemonTeam[myCurrentPokemonIndex].xp = newXP;\n            save_Object.myCatchedPokemons[pokemonIndex].xp = newXP;\n            myPokemonXPProgress.value = myStaticPokemon.xp;\n            save_SaveObj();\n            showInfoBox(\n                `${makeFirstLetterBig(\n                    myStaticPokemon.name,\n                )} erhält ${calcXP} XP`,\n            );\n        }\n    } else if (oldXP > 400) {\n        const newLevel = currentLevel++;\n        const levelDevideBy5 = currentLevel % 5;\n        const evolveLevel = currentLevel % 11;\n        let newAttackMessage = '';\n        let newAttackName = '';\n        //#####################################################################\n        // ? Wenn Level 5 Modulus = 0, soll neue Attacke gelernt werden\n        //#####################################################################\n        if (levelDevideBy5 === 0) {\n            levelUp_with_learn_Attack(currentLevel, pokemonIndex)\n            //#####################################################################\n            // ? Leveln inklusive Evolution !!!\n            //#####################################################################\n        } else if (evolveLevel === 0) {\n            levelUp_with_Evolving(currentLevel, pokemonIndex)\n            //#####################################################################\n            // ? Normales Leveln ohne neue Attacke zu erlernen\n            //#####################################################################\n        } else {\n            normalLevelUp(currentLevel, pokemonIndex)\n        }\n    }\n}\n\nfunction normalLevelUp(currentLevel, pokemonIndex) {\n    save_Object.myPokemonTeam[myCurrentPokemonIndex].level = currentLevel;\n    save_Object.myPokemonTeam[myCurrentPokemonIndex].xp = 0;\n    save_Object.myPokemonTeam[myCurrentPokemonIndex].hp += 1;\n    save_Object.myPokemonTeam[myCurrentPokemonIndex].maxHp += 1;\n    save_Object.myPokemonTeam[myCurrentPokemonIndex].statAttack += 1;\n    save_Object.myPokemonTeam[myCurrentPokemonIndex].statDefense += 1;\n    save_Object.myCatchedPokemons[pokemonIndex].xp = 0;\n    save_Object.myCatchedPokemons[pokemonIndex].level = currentLevel;\n    save_Object.myCatchedPokemons[pokemonIndex].maxHp += 1;\n    save_Object.myCatchedPokemons[pokemonIndex].hp += 1;\n    save_Object.myCatchedPokemons[pokemonIndex].statAttack += 1;\n    save_Object.myCatchedPokemons[pokemonIndex].statDefense += 1;\n    myPokemonXPProgress.value = myStaticPokemon.xp;\n    save_SaveObj();\n    showInfoBox(`${makeFirstLetterBig(myStaticPokemon.name)} erreicht Level ${currentLevel} <br>\n    Gesundheit: + 1 <br>\n    Angriff: + 1 <br>\n    Verteidigung: + 1`);\n    setTimeout(() => {\n        myPokeName.innerHTML = `${makeFirstLetterBig(\n            myStaticPokemon.name,\n        )} | Lv.${currentLevel} | KP.${myStaticPokemon.hp}`;\n    }, 1000);\n}\n\n\nfunction levelUp_with_learn_Attack(currentLevel, pokemonIndex) {\n    let newAttackMessage = '';\n    let newAttackName = '';\n    let newAttackIndex = -1;\n    let moveArr = '';\n    try {\n        newAttackIndex =\n            save_Object.myCatchedPokemons[pokemonIndex].moves\n                .length;\n        moveArr =\n            save_Object.myCatchedPokemons[pokemonIndex].allMoves;\n        newAttackName = moveArr[newAttackIndex];\n        newAttackMessage = `${makeFirstLetterBig(\n            myStaticPokemon.name,\n        )} lernt ${newAttackName}`;\n        save_Object.myCatchedPokemons[pokemonIndex].moves.push(\n            newAttackName,\n        );\n    } catch (error) {\n        console.warn('New Move Error', error);\n    }\n    save_Object.myPokemonTeam[myCurrentPokemonIndex].level =\n        currentLevel;\n    save_Object.myPokemonTeam[myCurrentPokemonIndex].xp = 0;\n    save_Object.myPokemonTeam[myCurrentPokemonIndex].hp += 1;\n    save_Object.myPokemonTeam[myCurrentPokemonIndex].maxHp += 1;\n    save_Object.myPokemonTeam[\n        myCurrentPokemonIndex\n    ].statAttack += 1;\n    save_Object.myPokemonTeam[\n        myCurrentPokemonIndex\n    ].statDefense += 1;\n    save_Object.myCatchedPokemons[pokemonIndex].xp = 0;\n    save_Object.myCatchedPokemons[pokemonIndex].level =\n        currentLevel;\n    save_Object.myCatchedPokemons[pokemonIndex].maxHp += 1;\n    save_Object.myCatchedPokemons[pokemonIndex].hp += 1;\n    save_Object.myCatchedPokemons[pokemonIndex].statAttack += 1;\n    save_Object.myCatchedPokemons[pokemonIndex].statDefense += 1;\n    myPokemonXPProgress.value = myStaticPokemon.xp;\n    save_SaveObj();\n    showInfoBox(`${makeFirstLetterBig(\n        myStaticPokemon.name,\n    )} erreicht Level ${currentLevel} <br>\n        Gesundheit: + 1 <br>\n        Angriff: + 1 <br>\n        Verteidigung: + 1 <br>\n        ${newAttackMessage}`);\n    setTimeout(() => {\n        myPokeName.innerHTML = `${makeFirstLetterBig(\n            myStaticPokemon.name,\n        )} | Lv.${currentLevel} | KP.${myStaticPokemon.hp}`;\n    }, 1000);\n}\n\nfunction levelUp_with_Evolving(currentLevel, pokemonIndex) {\n    const oldID = myStaticPokemon.id;\n    let evolveToId = 0;\n    let evolvedName = '';\n    let evolve_spriteFront = '';\n    let evolve_spriteBack = '';\n    fetch(`https://pokeapi.co/api/v2/pokemon-species/${makeFirstLetterSmall(myStaticPokemon.name)}/`)\n        .then((res) => res.json())\n        .then((data) => {\n            fetch(data.evolution_chain.url)\n                .then((res) => res.json())\n                .then((data2) => {\n                    if (data2.chain.evolves_to.length === 0) {\n                        normalLevelUp(currentLevel, pokemonIndex)\n                    }\n                    let fetchNewPokemonUrl = data2.chain.evolves_to[0].species.url;\n                    try {\n                        fetchNewPokemonUrl = data2.chain.evolves_to[0].evolves_to[0].species.url;\n                    } catch (error) {\n                    }\n                    fetch(fetchNewPokemonUrl)\n                        .then((res) => res.json())\n                        .then((data3) => {\n                            console.log('Data3', data3);\n                            evolveToId = data3.id;\n                            evolvedName = data3.name;\n                            fetch(`https://pokeapi.co/api/v2/pokemon/${evolveToId}/`)\n                                .then((res) => res.json())\n                                .then((data4) => {\n                                    evolve_spriteFront = data4.sprites.front_default;\n                                    evolve_spriteBack = data4.sprites.back_default;\n                                    if (oldID !== evolveToId) {\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].spriteBack = evolve_spriteBack\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].spriteFront = evolve_spriteFront\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].id = evolveToId\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].name = evolvedName\n                                        save_Object.myCatchedPokemons[pokemonIndex].spriteBack = evolve_spriteBack\n                                        save_Object.myCatchedPokemons[pokemonIndex].spriteFront = evolve_spriteFront\n                                        save_Object.myCatchedPokemons[pokemonIndex].id = evolveToId\n                                        save_Object.myCatchedPokemons[pokemonIndex].name = evolvedName\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].level = currentLevel;\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].xp = 0;\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].hp += 1;\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].maxHp += 1;\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].statAttack += 1;\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].statDefense += 1;\n                                        save_Object.myCatchedPokemons[pokemonIndex].xp = 0;\n                                        save_Object.myCatchedPokemons[pokemonIndex].level = currentLevel;\n                                        save_Object.myCatchedPokemons[pokemonIndex].maxHp += 1;\n                                        save_Object.myCatchedPokemons[pokemonIndex].hp += 1;\n                                        save_Object.myCatchedPokemons[pokemonIndex].statAttack += 1;\n                                        save_Object.myCatchedPokemons[pokemonIndex].statDefense += 1;\n                                        myPokemonXPProgress.value = myStaticPokemon.xp;\n                                        save_SaveObj();\n                                        alert(`Wow, ${makeFirstLetterBig(myStaticPokemon.name)} entwickelt sich zu ${evolvedName}`)\n                                        showInfoBox(`${makeFirstLetterBig(myStaticPokemon.name)} erreicht Level ${currentLevel} <br>\n                                            Gesundheit: + 1 <br>\n                                            Angriff: + 1 <br>\n                                            Verteidigung: + 1`);\n                                        setTimeout(() => {\n                                            myPokeName.innerHTML = `${makeFirstLetterBig(\n                                                myStaticPokemon.name,\n                                            )} | Lv.${currentLevel} | KP.${myStaticPokemon.hp}`;\n                                        }, 1000);\n\n                                    } else {\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].level = currentLevel;\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].xp = 0;\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].hp += 1;\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].maxHp += 1;\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].statAttack += 1;\n                                        save_Object.myPokemonTeam[myCurrentPokemonIndex].statDefense += 1;\n                                        save_Object.myCatchedPokemons[pokemonIndex].xp = 0;\n                                        save_Object.myCatchedPokemons[pokemonIndex].level = currentLevel;\n                                        save_Object.myCatchedPokemons[pokemonIndex].maxHp += 1;\n                                        save_Object.myCatchedPokemons[pokemonIndex].hp += 1;\n                                        save_Object.myCatchedPokemons[pokemonIndex].statAttack += 1;\n                                        save_Object.myCatchedPokemons[pokemonIndex].statDefense += 1;\n                                        myPokemonXPProgress.value = myStaticPokemon.xp;\n                                        save_SaveObj();\n                                        showInfoBox(`${makeFirstLetterBig(myStaticPokemon.name)} erreicht Level ${currentLevel} <br>\n                                            Gesundheit: + 1 <br>\n                                            Angriff: + 1 <br>\n                                            Verteidigung: + 1`);\n                                        setTimeout(() => {\n                                            myPokeName.innerHTML = `${makeFirstLetterBig(\n                                                myStaticPokemon.name,\n                                            )} | Lv.${currentLevel} | KP.${myStaticPokemon.hp}`;\n                                        }, 1000);\n                                    }\n                                });\n                        });\n                });\n        })\n        .catch((error) => {\n            save_Object.myPokemonTeam[myCurrentPokemonIndex].level = currentLevel;\n            save_Object.myPokemonTeam[myCurrentPokemonIndex].xp = 0;\n            save_Object.myPokemonTeam[myCurrentPokemonIndex].hp += 1;\n            save_Object.myPokemonTeam[myCurrentPokemonIndex].maxHp += 1;\n            save_Object.myPokemonTeam[myCurrentPokemonIndex].statAttack += 1;\n            save_Object.myPokemonTeam[myCurrentPokemonIndex].statDefense += 1;\n            save_Object.myCatchedPokemons[pokemonIndex].xp = 0;\n            save_Object.myCatchedPokemons[pokemonIndex].level = currentLevel;\n            save_Object.myCatchedPokemons[pokemonIndex].maxHp += 1;\n            save_Object.myCatchedPokemons[pokemonIndex].hp += 1;\n            save_Object.myCatchedPokemons[pokemonIndex].statAttack += 1;\n            save_Object.myCatchedPokemons[pokemonIndex].statDefense += 1;\n            myPokemonXPProgress.value = myStaticPokemon.xp;\n            save_SaveObj();\n            showInfoBox(`${makeFirstLetterBig(myStaticPokemon.name)} erreicht Level ${currentLevel} <br>\n                    Gesundheit: + 1 <br>\n                    Angriff: + 1 <br>\n                    Verteidigung: + 1`);\n            setTimeout(() => {\n                myPokeName.innerHTML = `${makeFirstLetterBig(\n                    myStaticPokemon.name,\n                )} | Lv.${currentLevel} | KP.${myStaticPokemon.hp}`;\n            }, 1000);\n        });\n}\n\nfunction checkPokeTypes(attackType, defenderType) {\n    console.log('attackType', attackType);\n    switch (attackType) {\n        case 'fire':\n            img_Animat.src = `./assets/mv_fire.png`;\n            break;\n        case 'electric':\n            img_Animat.src = `./assets/mv_electro.png`;\n            break;\n        case 'water':\n            img_Animat.src = `./assets/mv_water.png`;\n            break;\n        case 'normal':\n            img_Animat.src = `./assets/mv_normal2.png`;\n            break;\n        case 'rock':\n            img_Animat.src = `./assets/mv_rock.png`;\n            break;\n        case 'grass':\n            img_Animat.src = `./assets/mv_grass.png`;\n            break;\n        case 'ice':\n            img_Animat.src = `./assets/mv_ice.png`;\n            break;\n        case 'poison':\n            img_Animat.src = `./assets/mv_poison.png`;\n            break;\n        case 'dark':\n            img_Animat.src = `./assets/mv_dark.png`;\n            break;\n        case 'ground':\n            img_Animat.src = `./assets/mv_ground.png`;\n            break;\n        default:\n            img_Animat.src = `./assets/mv_normal.png`;\n            break;\n    }\n\n    const attackTypeValues = {\n        normal: {\n            200: [],\n            100: [\n                'normal',\n                'fighting',\n                'flying',\n                'poison',\n                'ground',\n                'bug',\n                'fire',\n                'water',\n                'grass',\n                'electric',\n                'psychic',\n                'ice',\n                'dragon',\n                'dark',\n                'fairy',\n            ],\n            50: ['rock', 'steel'],\n            0: ['ghost'],\n        },\n        fighting: {\n            200: ['normal', 'rock', 'steel', 'ice', 'dark'],\n            100: [\n                'fighting',\n                'ground',\n                'fire',\n                'water',\n                'grass',\n                'electric',\n                'dragon',\n            ],\n            50: ['flying', 'poison', 'bug', 'psychic', 'fairy'],\n            0: ['ghost'],\n        },\n        flying: {\n            200: ['fighting', 'bug', 'grass'],\n            100: [\n                'normal',\n                'flying',\n                'poison',\n                'ground',\n                'ghost',\n                'fire',\n                'water',\n                'psychic',\n                'ice',\n                'dragon',\n                'dark',\n                'fairy',\n            ],\n            50: ['rock', 'steel', 'electric'],\n            0: [],\n        },\n        poison: {\n            200: ['grass', 'fairy'],\n            100: [\n                'normal',\n                'fighting',\n                'flying',\n                'bug',\n                'fire',\n                'water',\n                'electric',\n                'psychic',\n                'ice',\n                'dragon',\n                'dark',\n            ],\n            50: ['poison', 'ground', 'rock', 'ghost'],\n            0: ['steel'],\n        },\n        ground: {\n            200: ['poison', 'rock', 'steel', 'fire', 'electric'],\n            100: [\n                'normal',\n                'fighting',\n                'ground',\n                'ghost',\n                'water',\n                'psychic',\n                'ice',\n                'dragon',\n                'dark',\n                'fairy',\n            ],\n            50: ['bug', 'grass'],\n            0: ['flying'],\n        },\n        rock: {\n            200: ['flying', 'bug', 'fire', 'ice'],\n            100: [\n                'normal',\n                'poison',\n                'rock',\n                'ghost',\n                'water',\n                'grass',\n                'electric',\n                'psychic',\n                'dragon',\n                'dark',\n                'fairy',\n            ],\n            50: ['fighting', 'ground', 'steel'],\n            0: [],\n        },\n        bug: {\n            200: ['grass', 'psychic', 'dark'],\n            100: [\n                'normal',\n                'ground',\n                'rock',\n                'bug',\n                'water',\n                'electric',\n                'ice',\n                'dragon',\n            ],\n            50: [\n                'fighting',\n                'flying',\n                'poison',\n                'ghost',\n                'steel',\n                'fire',\n                'fairy',\n            ],\n            0: [],\n        },\n        ghost: {\n            200: ['ghost', 'psychic'],\n            100: [\n                'fighting',\n                'flying',\n                'poison',\n                'ground',\n                'rock',\n                'bug',\n                'steel',\n                'fire',\n                'water',\n                'grass',\n                'electric',\n                'ice',\n                'dragon',\n                'fairy',\n            ],\n            50: ['dark'],\n            0: ['normal'],\n        },\n        steel: {\n            200: ['rock', 'ice', 'fairy'],\n            100: [\n                'normal',\n                'fighting',\n                'flying',\n                'poison',\n                'ground',\n                'bug',\n                'ghost',\n                'grass',\n                'psychic',\n                'dragon',\n                'dark',\n            ],\n            50: ['steel', 'fire', 'water', 'electric'],\n            0: [],\n        },\n        fire: {\n            200: ['bug', 'steel', 'grass', 'ice'],\n            100: [\n                'normal',\n                'fighting',\n                'flying',\n                'poison',\n                'ground',\n                'ghost',\n                'electric',\n                'psychic',\n                'dark',\n                'fairy',\n            ],\n            50: ['rock', 'fire', 'water', 'dragon'],\n            0: [],\n        },\n        water: {\n            200: ['ground', 'rock', 'fire'],\n            100: [\n                'normal',\n                'fighting',\n                'flying',\n                'poison',\n                'bug',\n                'ghost',\n                'steel',\n                'electric',\n                'psychic',\n                'ice',\n                'dark',\n                'fairy',\n            ],\n            50: ['water', 'grass', 'dragon'],\n            0: [],\n        },\n        grass: {\n            200: ['ground', 'rock', 'water'],\n            100: [\n                'normal',\n                'fighting',\n                'ghost',\n                'electric',\n                'psychic',\n                'ice',\n                'dark',\n                'fairy',\n            ],\n            50: ['flying', 'poison', 'bug', 'steel', 'fire', 'grass', 'dragon'],\n            0: [],\n        },\n        electric: {\n            200: ['flying', 'water'],\n            100: [\n                'normal',\n                'fighting',\n                'poison',\n                'rock',\n                'bug',\n                'ghost',\n                'steel',\n                'fire',\n                'psychic',\n                'ice',\n                'dark',\n                'fairy',\n            ],\n            50: ['grass', 'electric', 'dragon'],\n            0: ['ground'],\n        },\n        psychic: {\n            200: ['fighting', 'poison'],\n            100: [\n                'normal',\n                'flying',\n                'ground',\n                'rock',\n                'bug',\n                'ghost',\n                'fire',\n                'water',\n                'grass',\n                'electric',\n                'ice',\n                'dragon',\n                'fairy',\n            ],\n            50: ['steel', 'psychic'],\n            0: ['dark'],\n        },\n        ice: {\n            200: ['flying', 'ground', 'grass', 'dragon'],\n            100: [\n                'normal',\n                'fighting',\n                'poison',\n                'rock',\n                'bug',\n                'ghost',\n                'electric',\n                'psychic',\n                'dark',\n                'fairy',\n            ],\n            50: ['steel', 'fire', 'water', 'ice'],\n            0: [],\n        },\n        dragon: {\n            200: ['dragon'],\n            100: [\n                'normal',\n                'fighting',\n                'flying',\n                'poison',\n                'ground',\n                'rock',\n                'bug',\n                'ghost',\n                'fire',\n                'water',\n                'grass',\n                'electric',\n                'psychic',\n                'ice',\n                'dark',\n            ],\n            50: ['steel'],\n            0: ['fairy'],\n        },\n        dark: {\n            200: ['ghost', 'psychic'],\n            100: [\n                'normal',\n                'flying',\n                'poison',\n                'ground',\n                'rock',\n                'bug',\n                'steel',\n                'fire',\n                'water',\n                'grass',\n                'electric',\n                'ice',\n                'dragon',\n            ],\n            50: ['fighting', 'dark', 'fairy'],\n            0: [],\n        },\n        fairy: {\n            200: ['fighting', 'dragon', 'dark'],\n            100: [\n                'normal',\n                'flying',\n                'ground',\n                'rock',\n                'bug',\n                'ghost',\n                'water',\n                'grass',\n                'electric',\n                'psychic',\n                'ice',\n                'fairy',\n            ],\n            50: ['poison', 'steel', 'fire'],\n            0: [],\n        },\n    };\n\n    let attackTypeValue = 0;\n    let attackReturnValue = 0;\n    const keyWord = `${attackType}`;\n    const effectedPokemonArrays = attackTypeValues[keyWord];\n    for (const [key, value] of Object.entries(effectedPokemonArrays)) {\n        if (value.includes(defenderType)) {\n            attackTypeValue = parseInt(key);\n            parseInt(attackTypeValue);\n            break;\n        }\n    }\n\n    if (attackTypeValue === 200) {\n        attackReturnValue = 2;\n    }\n    if (attackTypeValue === 100) {\n        attackReturnValue = 1;\n    }\n    if (attackTypeValue === 50) {\n        attackReturnValue = 0.5;\n    }\n    if (attackTypeValue === 0) {\n        attackReturnValue = 0;\n    }\n\n    return attackReturnValue;\n}\n\nfunction randomize() {\n    const randomnumber = Math.random();\n    if (randomnumber <= 0.5) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction fetchWunschPokemon(id) {\n    fetch(`https://pokeapi.co/api/v2/pokemon/${id}/`)\n        .then((res) => res.json())\n        .then((data) => {\n            console.log('Wunschpokemon', data);\n\n            let x_moves = [];\n            for (let i = 0; i < data.moves.length; i++) {\n                x_moves.push(data.moves[i].move.name);\n            }\n            console.log(x_moves);\n        })\n        .catch((error) => {\n            console.warn(error);\n        });\n}\n\n// fetchWunschPokemon(74)\n// fetchWunschPokemon(75)\n\n\n\n\nfunction renderItems() {\n    document.getElementById(\"trankAmount\").innerHTML = save_Object.items.trank;\n    document.getElementById(\"beleberAmount\").innerHTML = save_Object.items.beleber;\n    document.getElementById(\"bonbonAmount\").innerHTML = save_Object.items.bonbon;\n}\n\n\nconst itemWindow = document.getElementById(\"itemWindow\")\nconst closeItemWindow = document.getElementById(\"closeItemWindow\")\nconst giveTrank = document.getElementById(\"giveTrank\")\nconst giveBeleber = document.getElementById(\"giveBeleber\")\nconst giveBonbon = document.getElementById(\"giveBonbon\")\n\nlet pokemonItemId = -1;\n// Pokemon Items anwenden\nif (itemButtons) {\n    itemButtons.forEach(((itemButton, index) => {\n        itemButton.addEventListener(\"click\", () => {\n            pokemonItemId = -1\n            const buttonIndex = index;\n            // Herausfinden ob Pokemon vorhanden\n            if (myTeam[buttonIndex] !== undefined) {\n                // An globaler Variable Id weitergeben\n                pokemonItemId = index\n                // Wenn ja, Item Fenster öffnen\n                itemWindow.classList.add(\"active\")\n            }\n        })\n    }))\n}\n\nif (closeItemWindow) {\n    closeItemWindow.addEventListener(\"click\", () => {\n        itemWindow.classList.remove(\"active\")\n    })\n}\n\nif (giveTrank) {\n    giveTrank.addEventListener(\"click\", () => {\n        /**\n         * Füllt 60 HP auf bzw. bis 100%\n         */\n        if (save_Object.items.trank >= 1) {\n            const pokemonName = myTeam[pokemonItemId].name;\n\n            const healRequest = window.confirm(`Möchtest du Deinem Pokemon ${makeFirstLetterBig(pokemonName)} \\n 1 Supertrank geben?`)\n            if (healRequest) {\n                // Herausfinden, ob Pokemon gerade kämpft\n                const staticPokemonUniqueId = myStaticPokemon.unique_ID;\n                const itemPokemonUniqueId = myTeam[pokemonItemId].unique_ID;\n                if (staticPokemonUniqueId === itemPokemonUniqueId) {\n                    if (myCurrentPokemonHP <= 0) {\n                        alert(\"Pokemon ist besiegt und kann nur wiederbelebt werden\")\n                        return\n                    }\n                    let newHP = myCurrentPokemonStaticHP\n                    const hpAfterTrank = myCurrentPokemonHP += 60;\n                    if (hpAfterTrank < myCurrentPokemonStaticHP) {\n                        newHP = hpAfterTrank\n                    }\n                    myCurrentPokemonHP = newHP;\n                    const hpPerc = myCurrentPokemonHP * 100 / myCurrentPokemonStaticHP\n                    myPokemonProgress.value = hpPerc\n                    document.getElementById(`teamPokeProgress_${pokemonItemId}`).value = hpPerc\n                    myPokeName.innerHTML = `${makeFirstLetterBig(pokemonName)} | Lv. ${myTeam[pokemonItemId].level} | KP.${myCurrentPokemonHP}`;\n\n                } else {\n                    let cHp = myTeam[pokemonItemId].hp\n                    let mHp = myTeam[pokemonItemId].maxHp\n                    let newHP = mHp\n                    const hpAfterTrank = cHp += 60;\n                    if (hpAfterTrank < mHp) {\n                        newHP = hpAfterTrank\n                    }\n                    cHp = newHP;\n                    myTeam[pokemonItemId].hp = cHp\n                    cHpPerc = cHp * 100 / mHp\n                    document.getElementById(`teamPokeProgress_${pokemonItemId}`).value = cHpPerc\n                }\n                // Speichern\n                save_Object.items.trank -= 1;\n                save_SaveObj();\n                // Schließen\n                itemWindow.classList.remove(\"active\")\n            }\n        }\n    })\n}\n\nfunction check_if_all_defeated() {\n    let minimum_one_alive = false;\n    for (let i = 0; i < myTeam.length; i++) {\n        if (myTeam[i].isDefeated === false) {\n            minimum_one_alive = true;\n            break\n        }\n    }\n\n    if(minimum_one_alive === false) {\n        alert(\"Dir wird schwarz vor augen\");\n        trainerBattle_round = 1;\n        localStorage.setItem('stored_battlecounter', JSON.stringify(trainerBattle_round));\n        save_Object.lastLocation = 'pokecenter';\n        save_SaveObj();\n        window.location = 'pokecenter.html';\n    }\n}\n\n//# sourceURL=webpack://project-template/./src/js/battle.js?");

/***/ }),

/***/ "./src/js/catchedPokemon.js":
/*!**********************************!*\
  !*** ./src/js/catchedPokemon.js ***!
  \**********************************/
/***/ (() => {

eval("let myCatchedPokemons = [];\nlet myTeam = [];\nlet pokemonByID = []\nlet currentDetailPokemonIndex = -1;\nlet newLearnedMoveIndex = -1;\nlet is_LearningNewMove = false;\n\nconst pokeballPrice = 10;\nconst trankPrice = 15;\nconst beleberPrice = 20;\nconst bonbonPrice = 50;\n\n\nconst catchedPokemonContaier = document.getElementById(\"catchedPokemonContaier\");\nconst teamPokemonContainer = document.getElementById(\"teamPokemonContainer\");\nconst btn_ResetGame = document.getElementById(\"btn_ResetGame\");\nconst btnHeal = document.getElementById(\"btnHeal\");\nconst cont_Detail = document.getElementById(\"cont_Detail\")\nconst btnCloseDetails = document.getElementById(\"btnCloseDetails\");\nconst lbl_Money = document.getElementById(\"lbl_Money\");\nconst lbl_Shop_Money = document.getElementById(\"lbl_Shop_Money\");\nconst shopWindow = document.getElementById(\"shopWindow\");\nconst btnCloseShop = document.getElementById(\"btnCloseShop\");\nconst btn_open_Pokelist = document.getElementById(\"btn_open_Pokelist\");\nconst btn_Pokeball = document.getElementById(\"btn_Pokeball\");\nconst lbl_Amount_Pokeballs = document.getElementById(\"lbl_Amount_Pokeballs\");\nconst btn_Buy = document.getElementById(\"btn_Buy\");\nconst setting_Gen = document.getElementById(\"setting_Gen\");\nconst btn_refresh_todays_Pokemon = document.getElementById(\"btn_refresh_todays_Pokemon\");\nconst pokemonListCont = document.getElementById(\"pokemonListCont\");\nconst btnClosePokemonList = document.getElementById(\"btnClosePokemonList\");\nconst todayPokemonListWindow = document.getElementById(\"todayPokemonListWindow\");\n\nconst mv_0 = document.getElementById(\"mv_0\")\nconst mv_1 = document.getElementById(\"mv_1\")\nconst mv_2 = document.getElementById(\"mv_2\")\nconst mv_3 = document.getElementById(\"mv_3\")\nconst modalMoves = document.getElementById(\"modalMoves\")\n\n\nlet save_Object = {\n    today_Date: '',\n    myPokemonTeam: [],\n    myCatchedPokemons: [],\n    allFacedPokemons: [],\n    allPokemonMoves: [],\n    today_Pokemons: [],\n    items: {\n        pokeballs: 60,\n        money: 100,\n        beleber: 5,\n        trank: 5,\n        bonbon: 3\n    },\n    gen: 'all'\n};\n\n\nwindow.onload = init();\n\nfunction init() {\n    if (document.getElementById(\"catchPokeTag\")) {\n        load_SaveObj();\n    }\n}\n\n\nfunction load_SaveObj() {\n    if (localStorage.getItem('stored_save_Object') != null) {\n        save_Object = JSON.parse(localStorage.getItem('stored_save_Object'));\n        myTeam = save_Object.myPokemonTeam;\n        myCatchedPokemons = save_Object.myCatchedPokemons;\n        document.getElementById(\"outpCatchedAmount\").innerHTML = `${myCatchedPokemons.length} gefangen`\n\n        pokemonByID = myCatchedPokemons.slice(0);\n        pokemonByID.sort(function(a,b) {\n            return a.id - b.id;\n        });\n\n        try {\n            renderCatchedPokemons();\n            renderTeam();\n            renderTodayPokemons();\n            lbl_Money.innerHTML = `$ - ${save_Object.items.money}`;\n            setting_Gen.value = save_Object.gen\n        } catch (error) {\n\n        }\n    }\n}\n\nfunction save_SaveObj() {\n    localStorage.setItem('stored_save_Object', JSON.stringify(save_Object));\n    console.log('SaveObj', save_Object);\n}\n\n\nfunction renderCatchedPokemons() {\n    for (let i = 0; i < pokemonByID.length; i++) {\n        let pokeCont = document.createElement('div');\n        pokeCont.classList.add(\"pokemonContaier\")\n\n        let addBtn = document.createElement(\"div\");\n        addBtn.innerHTML = \"+\"\n        addBtn.classList.add(\"addButton\")\n        addBtn.id = pokemonByID[i].unique_ID\n\n        for(let j = 0; j < myTeam.length; j++) {\n            if(pokemonByID[i].unique_ID === myTeam[j].unique_ID) {\n                pokeCont.classList.add('isMember')\n                break\n            }\n        }\n\n\n        let detailBtn = document.createElement(\"div\");\n        detailBtn.innerHTML = \"i \"\n        detailBtn.classList.add(\"detailBtn\")\n        detailBtn.id = pokemonByID[i].unique_ID\n\n        let sellBtn = document.createElement(\"div\");\n        sellBtn.innerHTML = \"$\"\n        sellBtn.classList.add(\"sellBtn\")\n        sellBtn.id = pokemonByID[i].unique_ID\n\n        let pokeimage = document.createElement(\"img\");\n        pokeimage.src = pokemonByID[i].spriteFront;\n\n        let pokename = document.createElement(\"p\");\n        pokename.innerHTML = makeFirstLetterBig(pokemonByID[i].name) + ` | Lv.${pokemonByID[i].level}`;\n\n        let infocont = document.createElement(\"div\");\n        infocont.classList.add(\"infobox\");\n\n        let level = document.createElement(\"p\");\n        level.innerHTML = `Lv.${pokemonByID[i].level}`;\n\n        let type = document.createElement(\"p\");\n        type.innerHTML = `Typ: ${makeFirstLetterBig(pokemonByID[i].type)}`;\n\n        let number = document.createElement(\"p\");\n        number.innerHTML = `Nr. ${pokemonByID[i].id}`;\n\n        infocont.appendChild(level)\n        infocont.appendChild(type)\n        infocont.appendChild(number)\n\n        pokeCont.appendChild(addBtn)\n        pokeCont.appendChild(detailBtn)\n        pokeCont.appendChild(sellBtn)\n        pokeCont.appendChild(pokeimage)\n        pokeCont.appendChild(pokename)\n        // pokeCont.appendChild(infocont)\n\n        catchedPokemonContaier.appendChild(pokeCont)\n    }\n}\n//####################################################################\n// HEUTIGE POKEMON\n//####################################################################\n\nfunction renderTodayPokemons() {\n    for(let i = 0; i < save_Object.today_Pokemons.length; i++) {\n        let box = document.createElement('div');\n        box.classList.add('pokeBox');\n        let isKnown = false;\n        let imgP = document.createElement('img');\n        const searchedID = save_Object.today_Pokemons[i]\n        for(let j = 0; j < save_Object.allFacedPokemons.length; j++) {\n            if(searchedID === save_Object.allFacedPokemons[j].id) {\n                isKnown = true;\n                imgP.src = save_Object.allFacedPokemons[j].spriteFront;\n                break;\n            }\n        }\n        if(isKnown === true) {\n            box.appendChild(imgP)\n        }else {\n            box.innerHTML = `? <br> ${save_Object.today_Pokemons[i]}`;\n        }\n        pokemonListCont.appendChild(box)\n    }\n}\n\n// Öffnen\nif(btn_open_Pokelist) {\n    btn_open_Pokelist.addEventListener(\"click\", ()=> {\n        todayPokemonListWindow.classList.add('active')\n    })\n}\n\nif(btnClosePokemonList) {\n    btnClosePokemonList.addEventListener('click', ()=> {\n        todayPokemonListWindow.classList.remove('active')\n    })\n}\n//####################################################################\n\n// Pokemon hinzufügen\nconst addBtn = document.querySelectorAll('.addButton');\nif (addBtn) {\n    addBtn.forEach((button) => {\n        button.addEventListener('click', () => {\n            let pokemonIndex = -1;\n            let addedPokemon;\n            for (let i = 0; i < myCatchedPokemons.length; i++) {\n                if (button.id === myCatchedPokemons[i].unique_ID) {\n                    pokemonIndex = i;\n                    break;\n                }\n            }\n\n            // Prüfen ob Pokemon gefunden\n            if (pokemonIndex >= 0) {\n                addedPokemon = myCatchedPokemons[pokemonIndex]\n\n                // check ob teamplatz frei\n                const freeTeamNumbers = myTeam.length;\n                if (freeTeamNumbers < 4) {\n                    let isAlreadyInTeam = false;\n                    for(let i = 0; i < myTeam.length; i++) {\n                        if(myTeam[i].unique_ID === addedPokemon.unique_ID) {\n                            console.log('');\n                            isAlreadyInTeam = true;\n                            break\n                        }\n                    }\n                    if(isAlreadyInTeam === false) {\n                        myTeam.unshift(addedPokemon);\n                        console.log(myTeam);\n                        save_SaveObj();\n                        location.reload();\n                    }\n                } else {\n                    alert(\"Kein Platz mehr frei\")\n                }\n            }\n        });\n    });\n}\n\n\nconst delBtn = document.querySelectorAll('.deleteButton');\nif (delBtn) {\n    delBtn.forEach((button) => {\n        button.addEventListener('click', () => {\n            let pokemonIndex = -1;\n            let removedPokemon;\n            for (let i = 0; i < myTeam.length; i++) {\n                if (button.id === myTeam[i].unique_ID) {\n                    pokemonIndex = i;\n                    break;\n                }\n            }\n\n            if (pokemonIndex >= 0) {\n                myTeam.splice(pokemonIndex, 1);\n                renderTeam();\n                save_SaveObj();\n                location.reload();\n            }\n        });\n    });\n}\n\n\nconst sellBtn = document.querySelectorAll('.sellBtn');\nif (sellBtn) {\n    sellBtn.forEach((button) => {\n        button.addEventListener('click', () => {\n            // Nur verkaufen, wenn mehr als 1 Pokemon vorhanden ist\n           if(myCatchedPokemons.length > 1) {\n            let pokemonIndex = -1;\n            for (let i = 0; i < myCatchedPokemons.length; i++) {\n                if (button.id === myCatchedPokemons[i].unique_ID) {\n                    pokemonIndex = i;\n                    break;\n                }\n            }\n\n            if (pokemonIndex >= 0) {\n                const pokemonPrice = parseInt(myCatchedPokemons[pokemonIndex].level * 9)\n                const confirmSell = window.confirm(`Möchtest du das Pokemon: \"${myCatchedPokemons[pokemonIndex].name}\" wirklich verkaufen? \\nDu erhälst dafür ${pokemonPrice}$`)\n                if(confirmSell) {\n                myCatchedPokemons.splice(pokemonIndex, 1);\n\n                 pokemonIndex = -1;\n                for (let i = 0; i < myTeam.length; i++) {\n                    if (button.id === myTeam[i].unique_ID) {\n                        pokemonIndex = i;\n                        break;\n                    }\n                }\n                if (pokemonIndex >= 0) {\n                    myTeam.splice(pokemonIndex, 1);\n                }\n                save_Object.items.money += pokemonPrice;\n                save_SaveObj();\n                location.reload();\n                }\n            }\n           }else {\n            alert(\"Du benötigst mindestens 1 Pokemon\")\n           }\n        });\n    });\n}\n\n\nconst detailBtn = document.querySelectorAll('.detailBtn');\nif (detailBtn) {\n    detailBtn.forEach((button) => {\n        button.addEventListener('click', () => {\n            let pokemonIndex = -1;\n            for (let i = 0; i < myCatchedPokemons.length; i++) {\n                if (button.id === myCatchedPokemons[i].unique_ID) {\n                    pokemonIndex = i;\n                    currentDetailPokemonIndex = i\n                    break;\n                }\n            }\n\n            if (pokemonIndex >= 0) {\n                console.log('myCatchedPokemons[pokemonIndex]', myCatchedPokemons[pokemonIndex]);\n                cont_Detail.classList.add(\"active\");\n                document.getElementById(\"det_Pokename\").innerHTML = makeFirstLetterBig(myCatchedPokemons[pokemonIndex].name)\n                document.getElementById(\"det_PokemonImage\").src = myCatchedPokemons[pokemonIndex].spriteFront\n                document.getElementById(\"det_Attack\").innerHTML = `Angriff: ${myCatchedPokemons[pokemonIndex].statAttack}`\n                document.getElementById(\"det_Def\").innerHTML = `Verteidigung: ${myCatchedPokemons[pokemonIndex].statDefense}`\n                document.getElementById(\"det_Lv\").innerHTML = `Lv.${myCatchedPokemons[pokemonIndex].level}`\n                document.getElementById(\"det_HP\").innerHTML = `Max KP: ${myCatchedPokemons[pokemonIndex].maxHp}`\n                document.getElementById(\"det_Type\").innerHTML = `Typ: ${myCatchedPokemons[pokemonIndex].type}`\n                document.getElementById(\"det_Nr\").innerHTML = `Nr: ${myCatchedPokemons[pokemonIndex].id}`\n                document.getElementById(\"det_catchDate\").innerHTML = `Gefangen am: <br> -`\n                document.getElementById(\"det_catchName\").innerHTML = `Name: <br> -`\n                document.getElementById(\"det_catchLv\").innerHTML = `Level: <br> -`\n                try {\n                    document.getElementById(\"det_catchDate\").innerHTML = `Gefangen am: <br> ${myCatchedPokemons[pokemonIndex].catchval.catchDate}`\n                    document.getElementById(\"det_catchName\").innerHTML = `Name: <br> ${makeFirstLetterBig(myCatchedPokemons[pokemonIndex].catchval.catchName)}`\n                    document.getElementById(\"det_catchLv\").innerHTML = `Level: <br> ${myCatchedPokemons[pokemonIndex].catchval.catchLevel}`\n                } catch (error) { }\n\n            // moveList\n            const moveList = document.getElementById(\"moveList\");\n            moveList.innerHTML = ''\n            for(let i = 0; i < myCatchedPokemons[pokemonIndex].moves.length; i++) {\n                    let mvBtn = document.createElement('div')\n                    mvBtn.innerHTML = myCatchedPokemons[pokemonIndex].moves[i]\n                    mvBtn.classList.add('move_button')\n                    if(i <= 3) {\n                        mvBtn.classList.add(\"move_active\")\n                    }\n                    moveList.appendChild(mvBtn)\n                }\n            }\n\n\n\n            // Funktion für Move ändern\n            const moveButtonClick = document.querySelectorAll('.move_button');\n            if (moveButtonClick) {\n                moveButtonClick.forEach((button, index) => {\n                    button.addEventListener('click', () => {\n                        if(index > 3) {\n                            if(is_LearningNewMove === false) {\n                                const confirmLerning = window.confirm(`Möchtest du, dass dein Pokemon die Attacke ${myCatchedPokemons[currentDetailPokemonIndex].moves[index]} erlernt?`)\n                                if(confirmLerning) {\n                                    is_LearningNewMove = true\n                                    newLearnedMoveIndex = index\n                                    // alert(\"Klicke auf die Attacke, welche verlernt werden soll. Keine sorge, dein Pokemon vergisst sie nicht vollständig.\")\n                                    modalMoves.classList.add(\"active\")\n                                    for(let i = 0; i <= 3; i++) {\n                                        document.getElementById(`mv_${i}`).innerHTML = myCatchedPokemons[pokemonIndex].moves[i]\n                                    }\n                                }\n                            }\n                        }\n                    });\n                });\n            }\n        });\n    });\n}\n\nif(btnCloseDetails) {\n    btnCloseDetails.addEventListener(\"click\", ()=> {\n        cont_Detail.classList.remove(\"active\");\n    })\n}\n\n\nif(mv_0) {\n    mv_0.addEventListener(\"click\", ()=> {\n        learn_forget_Attack(0)\n        modalMoves.classList.remove(\"active\")\n    })\n}\nif(mv_1) {\n    mv_1.addEventListener(\"click\", ()=> {\n        learn_forget_Attack(1)\n        modalMoves.classList.remove(\"active\")\n    })\n}\nif(mv_2) {\n    mv_2.addEventListener(\"click\", ()=> {\n        learn_forget_Attack(2)\n        modalMoves.classList.remove(\"active\")\n    })\n}\nif(mv_3) {\n    mv_3.addEventListener(\"click\", ()=> {\n        learn_forget_Attack(3)\n        modalMoves.classList.remove(\"active\")\n    })\n}\n\n\n // Attacke aufnehmen die vergessen werden soll und tauschen\nfunction learn_forget_Attack(forgotIndex) {\n    let teamPokemonIndex = -1;\n    const searchID = myCatchedPokemons[currentDetailPokemonIndex].unique_ID\n\n    for(let i = 0; i < myTeam.length; i++) {\n        if(myTeam[i].unique_ID === searchID) {\n            teamPokemonIndex = i;\n            break\n        }\n    }\n    const toForgetMoveName = myCatchedPokemons[currentDetailPokemonIndex].moves[forgotIndex]\n    const toLearnMoveName = myCatchedPokemons[currentDetailPokemonIndex].moves[newLearnedMoveIndex]\n    myCatchedPokemons[currentDetailPokemonIndex].moves.splice(forgotIndex, 1, toLearnMoveName)\n    myCatchedPokemons[currentDetailPokemonIndex].moves.splice(newLearnedMoveIndex, 1)\n    myCatchedPokemons[currentDetailPokemonIndex].moves.push(toForgetMoveName)\n\n    if(teamPokemonIndex !== -1) {\n        const toForgetMoveName = myTeam[teamPokemonIndex].moves[forgotIndex]\n        const toLearnMoveName = myTeam[teamPokemonIndex].moves[newLearnedMoveIndex]\n        myTeam[teamPokemonIndex].moves.splice(forgotIndex, 1, toLearnMoveName)\n        myTeam[teamPokemonIndex].moves.splice(newLearnedMoveIndex, 1)\n        myTeam[teamPokemonIndex].moves.push(toForgetMoveName)\n    }\n\n    is_LearningNewMove = false;\n    alert(`${makeFirstLetterBig(toLearnMoveName)} wurde erlernt und ${makeFirstLetterBig(toForgetMoveName)} wurde vergessen.`)\n    save_SaveObj();\n    cont_Detail.classList.remove(\"active\");\n}\n\n\n// Move Pokemon 1 pos down\nconst moveDownButton = document.querySelectorAll('.movedownButton');\nif (moveDownButton) {\n    moveDownButton.forEach((button) => {\n        button.addEventListener('click', () => {\n            let pokemonIndex = -1;\n            let movedPokemon;\n            for (let i = 0; i < myTeam.length; i++) {\n                if (button.id === myTeam[i].unique_ID) {\n                    pokemonIndex = i;\n                    break;\n                }\n            }\n\n            if (pokemonIndex >= 0) {\n                movedPokemon = myTeam[pokemonIndex];\n                myTeam.splice(pokemonIndex, 1);\n                myTeam.push(movedPokemon)\n                renderTeam();\n                save_SaveObj();\n                location.reload();\n            }\n        });\n    });\n}\n\n\n\nfunction renderTeam() {\n    teamPokemonContainer.innerHTML = \"\";\n    for (let i = 0; i < myTeam.length; i++) {\n        let pokeCont = document.createElement('div');\n        pokeCont.classList.add(\"pokemonContaier\")\n        pokeCont.classList.add(\"tp\")\n\n        let delBtn = document.createElement(\"div\");\n        delBtn.innerHTML = \"-\"\n        delBtn.classList.add(\"deleteButton\")\n        delBtn.id = myTeam[i].unique_ID\n\n        let moveBtn = document.createElement('div');\n        moveBtn.innerHTML = '>'\n        moveBtn.classList.add(\"movedownButton\")\n        moveBtn.id = myTeam[i].unique_ID\n\n        let pokeimage = document.createElement(\"img\");\n        pokeimage.src = myTeam[i].spriteFront;\n        document.getElementById(`teamPoke_${i}`).src = myTeam[i].spriteFront\n        document.getElementById(`teamPokeName_${i}`).innerHTML = makeFirstLetterBig(myTeam[i].name)\n        let hpInPercent = myTeam[i].hp * 100 / myTeam[i].maxHp\n        document.getElementById(`teamPokeProgress_${i}`).value = hpInPercent\n        \n        if(myTeam[i].isDefeated === true) {\n            document.getElementById(`teamPoke_${i}`).classList.add(\"defeat\");\n        }\n\n        let pokename = document.createElement(\"p\");\n        pokename.innerHTML = makeFirstLetterBig(myTeam[i].name);\n\n        let infocont = document.createElement(\"div\");\n        infocont.classList.add(\"infobox\");\n\n        let level = document.createElement(\"p\");\n        level.innerHTML = `Lv.${myTeam[i].level}`;\n\n        let type = document.createElement(\"p\");\n        type.innerHTML = `Typ: ${makeFirstLetterBig(myTeam[i].type)}`;\n\n        let number = document.createElement(\"p\");\n        number.innerHTML = `Nr. ${myTeam[i].id}`;\n\n        infocont.appendChild(level)\n        infocont.appendChild(type)\n        infocont.appendChild(number)\n\n        pokeCont.appendChild(delBtn)\n        pokeCont.appendChild(moveBtn)\n        pokeCont.appendChild(pokeimage)\n\n\n        teamPokemonContainer.appendChild(pokeCont)\n    }\n}\n\n\n// ######################################################\n// Lösche alles\nif(btn_ResetGame) {\n    btn_ResetGame.addEventListener(\"click\", ()=> {\n      const decision = window.confirm(\"Soll das Spiel wirklich zurückgesetzt werden? Der ganze Spielstand geht verloren!\");\n      if(decision) {\n        save_Object = {\n            today_Date: '',\n            myPokemonTeam: [],\n            myCatchedPokemons: [],\n            allFacedPokemons: [],\n            allPokemonMoves: [],\n            today_Pokemons: [],\n            items: {\n                pokeballs: 60,\n                money: 100,\n                beleber: 5,\n                trank: 5,\n                bonbon: 3\n            },\n            gen: 'all'\n        };\n\n        save_SaveObj();\n        location.reload();\n      }\n    })\n}\n\n\n\n//######################################################\n// Macht den Anfangsbuchstaben groß\n//######################################################\nfunction makeFirstLetterBig(word) {\n    const firstLetter = word[0];\n    let exportword = firstLetter.toUpperCase();\n    for (let i = 1; i < word.length; i++) {\n        exportword += word[i];\n    }\n    return exportword;\n}\n\n\nif(btnHeal){\n    btnHeal.addEventListener(\"click\", ()=> {\n        for(let i = 0; i < myTeam.length; i++) {\n            myTeam[i].isDefeated = false;\n            myTeam[i].hp = myTeam[i].maxHp;\n            let hpInPercent = myTeam[i].hp * 100 / myTeam[i].maxHp\n            document.getElementById(`teamPokeProgress_${i}`).value = hpInPercent\n        }\n        for(let i = 0; i < myCatchedPokemons.length; i++) {\n            myCatchedPokemons[i].isDefeated = false;\n            myCatchedPokemons[i].hp = myCatchedPokemons[i].maxHp;\n        }\n\n        for(let i = 0; i < save_Object.myCatchedPokemons.length; i++) {\n            save_Object.myCatchedPokemons[i].hp = save_Object.myCatchedPokemons[i].maxHp;\n        }\n\n        for(let i = 0; i < save_Object.myPokemonTeam.length; i++) {\n            save_Object.myPokemonTeam[i].hp = save_Object.myPokemonTeam[i].maxHp;\n            document.getElementById(`teamPoke_${i}`).classList.remove(\"defeat\");\n        }\n\n        save_SaveObj();\n        alert(\"Deine Pokemon wurden geheilt\")\n    })\n}\n\n// #####################################################################\n// Shop\nlet pokeballBuyAmount = 0;\nlet shopMoney = 0;\n\n\n\n\n\n// Close\nif(btnCloseShop) {\n    btnCloseShop.addEventListener(\"click\", ()=> {\n        shopWindow.classList.remove(\"active\");\n    })\n}\n\n// Increase Pokeball\nif(btn_Pokeball) {\n    btn_Pokeball.addEventListener(\"click\", ()=> {\n        if(shopMoney >= pokeballPrice) {\n            pokeballBuyAmount++;\n            shopMoney -= pokeballPrice;\n            updateShop()\n        }\n    })\n}\n\n\nif(btn_Buy) {\n    btn_Buy.addEventListener(\"click\", ()=> {\n        if(pokeballBuyAmount > 0) {\n            save_Object.items.money = shopMoney;\n            save_Object.items.pokeballs += pokeballBuyAmount;\n            lbl_Money.innerHTML = `$ - ${save_Object.items.money}`;\n            save_SaveObj();\n            if(pokeballBuyAmount === 1) {\n                alert(`Du hast erfolgreich ${pokeballBuyAmount} Pokeball gekauft.`)\n            }else {\n                alert(`Du hast erfolgreich ${pokeballBuyAmount} Pokebälle gekauft.`)\n            }\n            shopWindow.classList.remove(\"active\");\n        }\n    })\n}\n\nfunction updateShop() {\n    lbl_Shop_Money.innerHTML = `$ - ${shopMoney}`;\n    lbl_Amount_Pokeballs.innerHTML = pokeballBuyAmount;\n}\n\n\n// Generation auswählen\n\nif(setting_Gen) {\n    setting_Gen.addEventListener(\"change\", ()=> {\n        const value = setting_Gen.value;\n        save_Object.gen = value;\n        resetPokemon()\n    })\n}\n\n\n\nif(btn_refresh_todays_Pokemon) {\n    btn_refresh_todays_Pokemon.addEventListener(\"click\", ()=> {\n        const request = window.confirm(\"Sollen die Pokemon von Heute neu gemischt werden?\")\n        if(request) {\n            resetPokemon()\n        }\n    })\n}\n\nfunction resetPokemon() {\n    save_Object.today_Date = '';\n    save_SaveObj()\n}\n\n\n//# sourceURL=webpack://project-template/./src/js/catchedPokemon.js?");

/***/ }),

/***/ "./src/js/game-map1.js":
/*!*****************************!*\
  !*** ./src/js/game-map1.js ***!
  \*****************************/
/***/ (() => {

eval("const canvas = document.getElementById('canvas');\nconst collisions = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 24025,\n    24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 24025, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 24025, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 24025, 24025, 24025, 24025, 24025,\n    24025, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 24025,\n    24025, 24025, 24025, 24025, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025,\n    0, 0, 0, 24025, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025,\n    24025, 24025, 0, 0, 0, 0, 0, 24025, 24025, 24025, 24025, 24025, 0, 0, 0, 0,\n    24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0,\n    24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0,\n    24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 24025, 24025, 24025,\n    24025, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0,\n    0, 0, 0, 0, 24025, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    24025, 24025, 24025, 24025, 24025, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 24025, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0,\n    24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 24025,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 24025, 0, 0, 0,\n    0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0,\n    24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0,\n    24025, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0,\n    24025, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0,\n    0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0,\n    0, 0, 0, 24025, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    24025, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 24025, 24025, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    24025, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 24025, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 24025, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 24025, 24025, 24025,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 24025, 24025,\n    24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025,\n    24025, 24025, 24025, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 24025, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 24025, 24025, 24025, 24025,\n    24025, 24025, 24025, 24025, 0, 0, 24025, 24025, 24025, 24025, 24025, 24025,\n    24025, 24025, 24025, 24025, 24025, 24025, 24025, 0, 0, 0, 0, 24025, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    24025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24025, 24025, 24025, 24025,\n    24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025,\n    24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025,\n    24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025,\n    24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025,\n    24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 24025, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n];\n\nconst battleZoneData = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24026, 24026,\n    24026, 24026, 24026, 24026, 24026, 24026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 24026, 24026, 24026, 24026, 24026, 24026, 24026, 24026, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 24026, 24026, 24026, 24026, 24026, 24026, 24026, 24026, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24026, 24026, 24026, 24026, 24026, 24026,\n    24026, 24026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n];\n\nconst pokecenterEntrance = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24027, 24027,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24027, 24027, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0,\n];\n\nconst pokeMarketEntrances = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 291026, 291026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 291026, 291026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nconst gymEntrance = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24326, 24326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24326, 24326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nconst bttleEffect = document.getElementById('bttleEffect');\n\n// Neue Properties für Save_Object:\n// lastLocation: 'pokecenter'\n\nlet save_Object = {\n    today_Date: '',\n    myPokemonTeam: [],\n    myCatchedPokemons: [],\n    allFacedPokemons: [],\n    allPokemonMoves: [],\n    today_Pokemons: [],\n    items: {\n        pokeballs: 60,\n        money: 100,\n        beleber: 5,\n        trank: 5,\n        bonbon: 3,\n    },\n    gen: 'all',\n};\n\nlet myTeam = [];\n\nif (canvas) {\n    window.onload = init();\n\n    function init() {\n        if (document.getElementById('mapTag')) {\n            load_SaveObj();\n        }\n    }\n\n    function load_SaveObj() {\n        if (localStorage.getItem('stored_save_Object') != null) {\n            save_Object = JSON.parse(\n                localStorage.getItem('stored_save_Object'),\n            );\n            myTeam = save_Object.myPokemonTeam;\n            console.log('Saveobj', save_Object);\n            try {\n                renderTeam();\n            } catch (error) {}\n        }\n\n    }\n\n    function save_SaveObj() {\n        localStorage.setItem('stored_save_Object', JSON.stringify(save_Object));\n        console.log('SaveObj', save_Object);\n    }\n\n    function renderTeam() {\n        for (let i = 0; i < myTeam.length; i++) {\n            document.getElementById(`teamPoke_${i}`).src = myTeam[i].spriteFront;\n                document.getElementById(`teamPokeName_${i}`).innerHTML = makeFirstLetterBig(myTeam[i].name)\n                let hpInPercent = myTeam[i].hp * 100 / myTeam[i].maxHp\n                document.getElementById(`teamPokeProgress_${i}`).value = hpInPercent\n            if (myTeam[i].isDefeated === true) {\n                document\n                    .getElementById(`teamPoke_${i}`)\n                    .classList.add('defeat');\n            }\n        }\n    }\n\n    canvas.width = 400;\n    canvas.height = 400;\n    const ctx = canvas.getContext('2d');\n\n    ////////////////////////////////////////////////////////\n    // Create Collision map\n    const collisionMap = [];\n    for (let i = 0; i < collisions.length; i += 70) {\n        collisionMap.push(collisions.slice(i, 70 + i));\n    }\n\n    ////////////////////////////////////////////////////////\n\n    ////////////////////////////////////////////////////////\n    // Battlezone Map\n    const battlezoneMap = [];\n    for (let i = 0; i < battleZoneData.length; i += 70) {\n        battlezoneMap.push(battleZoneData.slice(i, 70 + i));\n    }\n\n    // Pokecenter Entrance\n    const pokecenterMap = [];\n    for (let i = 0; i < pokecenterEntrance.length; i += 70) {\n        pokecenterMap.push(pokecenterEntrance.slice(i, 70 + i));\n    }\n\n    // Poke Gym Entrance\n    const pokeGymMap = [];\n    for (let i = 0; i < gymEntrance.length; i += 70) {\n        pokeGymMap.push(gymEntrance.slice(i, 70 + i));\n    }\n\n    // PokeMarket Entrance\n    const pokemarketMap = [];\n    for (let i = 0; i < pokeMarketEntrances.length; i += 70) {\n        pokemarketMap.push(pokeMarketEntrances.slice(i, 70 + i));\n    }\n\n    class Boundary {\n        static width = 28;\n        static height = 28;\n        constructor({position}) {\n            this.position = position;\n            this.width = 28;\n            this.height = 28; // Weil 8 + 3.5 Zoomstufe bei TileMap\n        }\n\n        draw() {\n            ctx.fillStyle = 'rgba(255,0,0,0.0)';\n            ctx.fillRect(\n                this.position.x,\n                this.position.y,\n                this.width,\n                this.height,\n            );\n        }\n    }\n\n    const place_Coordinates = {\n        battlezone_Coordinates: {\n            x: -500,\n            y: -250,\n        },\n        pokecenter_Coordinates: {\n            x: -1440,\n            y: -250,\n        },\n        pokemarket_Coordinates: {\n            x: -10,\n            y: -450,\n        },\n    };\n\n    const boundaries = [];\n    let offset = {\n        x: -1440,\n        y: -250,\n    };\n\n    if(save_Object.lastLocation === 'battlezone') {\n        offset.x = place_Coordinates.battlezone_Coordinates.x\n        offset.y = place_Coordinates.battlezone_Coordinates.y\n    }else if(save_Object.lastLocation === 'pokecenter') {\n        offset.x = place_Coordinates.pokecenter_Coordinates.x\n        offset.y = place_Coordinates.pokecenter_Coordinates.y\n    }else if(save_Object.lastLocation === 'pokemarket') {\n        offset.x = place_Coordinates.pokemarket_Coordinates.x\n        offset.y = place_Coordinates.pokemarket_Coordinates.y\n    }else {\n        offset.x = place_Coordinates.battlezone_Coordinates.x\n        offset.y = place_Coordinates.battlezone_Coordinates.y\n    }\n\n    collisionMap.forEach((row, i) => {\n        row.forEach((symbol, j) => {\n            if (symbol === 24025) {\n                boundaries.push(\n                    new Boundary({\n                        position: {\n                            x: j * Boundary.width + offset.x,\n                            y: i * Boundary.height + offset.y,\n                        },\n                    }),\n                );\n            }\n        });\n    });\n\n    const battleZones = [];\n    battlezoneMap.forEach((row, i) => {\n        row.forEach((symbol, j) => {\n            if (symbol === 24026) {\n                battleZones.push(\n                    new Boundary({\n                        position: {\n                            x: j * Boundary.width + offset.x,\n                            y: i * Boundary.height + offset.y,\n                        },\n                    }),\n                );\n            }\n        });\n    });\n\n    const PokecenterZone = [];\n    pokecenterMap.forEach((row, i) => {\n        row.forEach((symbol, j) => {\n            if (symbol === 24027) {\n                PokecenterZone.push(\n                    new Boundary({\n                        position: {\n                            x: j * Boundary.width + offset.x,\n                            y: i * Boundary.height + offset.y,\n                        },\n                    }),\n                );\n            }\n        });\n    });\n\n    const PokemarketZone = [];\n    pokemarketMap.forEach((row, i) => {\n        row.forEach((symbol, j) => {\n            if (symbol === 291026) {\n                PokemarketZone.push(\n                    new Boundary({\n                        position: {\n                            x: j * Boundary.width + offset.x,\n                            y: i * Boundary.height + offset.y,\n                        },\n                    }),\n                );\n            }\n        });\n    });\n\n    const PokeGymZones = [];\n    pokeGymMap.forEach((row, i) => {\n        row.forEach((symbol, j) => {\n            if (symbol === 24326) {\n                PokeGymZones.push(\n                    new Boundary({\n                        position: {\n                            x: j * Boundary.width + offset.x,\n                            y: i * Boundary.height + offset.y,\n                        },\n                    }),\n                );\n            }\n        });\n    });\n\n\n    const image = new Image();\n    image.src = './assets/main-map.png';\n\n    const playerDownImage = new Image();\n    playerDownImage.src = './assets/playerDown.png';\n\n    const playerUpImage = new Image();\n    playerUpImage.src = './assets/playerUp.png';\n\n    const playerLeftImage = new Image();\n    playerLeftImage.src = './assets/playerLeft.png';\n\n    const playerRightImage = new Image();\n    playerRightImage.src = './assets/playerRight.png';\n\n    class Sprite {\n        constructor({\n            position,\n            velocity,\n            image,\n            frames = {max: 1},\n            sprites = [],\n        }) {\n            this.position = position;\n            this.image = image;\n            this.frames = {...frames, val: 0, elapsed: 0};\n\n            this.image.onload = () => {\n                this.width = this.image.width / this.frames.max;\n                this.height = this.image.height;\n            };\n            this.moving = false;\n            this.sprites = sprites;\n        }\n\n        draw() {\n            ctx.drawImage(\n                this.image,\n                this.frames.val * this.width,\n                0,\n                this.image.width / this.frames.max,\n                this.image.height,\n                this.position.x,\n                this.position.y,\n                this.image.width / this.frames.max,\n                this.image.height,\n            );\n            if (this.moving === true) {\n                if (this.frames.max > 1) {\n                    this.frames.elapsed++;\n                }\n                if (this.frames.elapsed % 10 === 0) {\n                    if (this.frames.val < this.frames.max - 1) {\n                        this.frames.val++;\n                    } else {\n                        this.frames.val = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    const player = new Sprite({\n        position: {\n            x: canvas.width / 2 - 183 / 3,\n            y: canvas.height / 2 - 62 / 2,\n        },\n        image: playerDownImage,\n        frames: {\n            max: 3,\n        },\n        sprites: {\n            up: playerUpImage,\n            left: playerLeftImage,\n            down: playerDownImage,\n            right: playerRightImage,\n        },\n    });\n\n    const background = new Sprite({\n        position: {\n            x: offset.x,\n            y: offset.y,\n        },\n        image: image,\n    });\n\n    const keys = {\n        w: {\n            pressed: false,\n        },\n        a: {\n            pressed: false,\n        },\n        s: {\n            pressed: false,\n        },\n        d: {\n            pressed: false,\n        },\n    };\n\n    const movables = [\n        background,\n        ...boundaries,\n        ...battleZones,\n        ...PokecenterZone,\n        ...PokemarketZone,\n        ...PokeGymZones,\n    ];\n\n    function rectangularCollision({rectangle1, rectangle2}) {\n        return (\n            rectangle1.position.x + rectangle1.width >= rectangle2.position.x &&\n            rectangle1.position.x <= rectangle2.position.x + rectangle2.width &&\n            rectangle1.position.y <=\n                rectangle2.position.y + rectangle2.height &&\n            rectangle1.position.y + rectangle1.height >= rectangle2.position.y\n        );\n    }\n\n    const battle = {\n        initiated: false,\n    };\n\n    // Animation loop\n    function animate() {\n        window.requestAnimationFrame(animate);\n\n        // Draw Methods\n        background.draw();\n\n        battleZones.forEach((battlezone) => {\n            battlezone.draw();\n        });\n\n        PokecenterZone.forEach((pokecenZone) => {\n            pokecenZone.draw();\n        });\n\n        PokemarketZone.forEach((pokemarZone) => {\n            pokemarZone.draw();\n        });\n\n        PokeGymZones.forEach((PokeGymZone) => {\n            PokeGymZone.draw();\n        });\n\n        player.draw();\n\n        boundaries.forEach((boundary) => {\n            boundary.draw();\n        });\n\n        let moving = true;\n        player.moving = false;\n\n        if (battle.initiated) return;\n        if (keys.w.pressed && lastKey === 'w') {\n            player.moving = true;\n            player.image = player.sprites.up;\n            for (let i = 0; i < boundaries.length; i++) {\n                const boundary = boundaries[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: {\n                            ...boundary,\n                            position: {\n                                x: boundary.position.x,\n                                y: boundary.position.y + 3,\n                            },\n                        },\n                    })\n                ) {\n                    moving = false;\n                    break;\n                }\n            }\n\n            // Collision Detection for Battlezone\n            for (let i = 0; i < battleZones.length; i++) {\n                const battleZone = battleZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: battleZone,\n                    })\n                ) {\n                    const rnd_BattleTrigger = Math.random();\n                    if (rnd_BattleTrigger < 0.01) {\n                        battle.initiated = true;\n                        player.moving = false;\n                        bttleEffect.classList.add('active');\n                        setTimeout(() => {\n                            save_Object.lastLocation = 'battlezone'\n                            save_SaveObj();\n                            window.location = 'battle.html';\n                        }, 2000);\n                    }\n                    break;\n                }\n            }\n            // Collision Detection for Pokecenter\n            for (let i = 0; i < PokecenterZone.length; i++) {\n                const PokecenterZne = PokecenterZone[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: PokecenterZne,\n                    })\n                ) {\n                    save_Object.lastLocation = 'pokecenter'\n                    save_SaveObj();\n                    window.location = 'pokecenter.html';\n                    break;\n                }\n            }\n            // Collision Detection for PokeGym\n            for (let i = 0; i < PokeGymZones.length; i++) {\n                const PokegymZone = PokeGymZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: PokegymZone,\n                    })\n                ) {\n                    save_Object.lastLocation = 'pokegym'\n                    save_SaveObj();\n                    window.location = 'battle.html';\n                    break;\n                }\n            }\n            // Collision Detection for Pokemarket\n            for (let i = 0; i < PokemarketZone.length; i++) {\n                const PokeMarketZne = PokemarketZone[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: PokeMarketZne,\n                    })\n                ) {\n                    save_Object.lastLocation = 'pokemarket'\n                    save_SaveObj();\n                    window.location = 'pokemarkt.html';\n                    break;\n                }\n            }\n            if (moving)\n                movables.forEach((movable) => {\n                    movable.position.y += 3;\n                });\n        } else if (keys.a.pressed && lastKey === 'a') {\n            player.moving = true;\n            player.image = player.sprites.left;\n            for (let i = 0; i < boundaries.length; i++) {\n                const boundary = boundaries[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: {\n                            ...boundary,\n                            position: {\n                                x: boundary.position.x + 3,\n                                y: boundary.position.y,\n                            },\n                        },\n                    })\n                ) {\n                    moving = false;\n                    break;\n                }\n            }\n            // Collision Detection for Battlezone\n            for (let i = 0; i < battleZones.length; i++) {\n                const battleZone = battleZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: battleZone,\n                    })\n                ) {\n                    const rnd_BattleTrigger = Math.random();\n                    if (rnd_BattleTrigger < 0.01) {\n                        battle.initiated = true;\n                        player.moving = false;\n                        bttleEffect.classList.add('active');\n                        setTimeout(() => {\n                            save_Object.lastLocation = 'battlezone'\n                            save_SaveObj();\n                            window.location = 'battle.html';\n                        }, 2000);\n                    }\n                    break;\n                }\n            }\n            // Collision Detection for Pokecenter\n            for (let i = 0; i < PokecenterZone.length; i++) {\n                const PokecenterZne = PokecenterZone[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: PokecenterZne,\n                    })\n                ) {\n                    save_Object.lastLocation = 'pokecenter'\n                    save_SaveObj();\n                    window.location = 'pokecenter.html';\n                    break;\n                }\n            }\n            // Collision Detection for PokeGym\n            for (let i = 0; i < PokeGymZones.length; i++) {\n                const PokegymZone = PokeGymZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: PokegymZone,\n                    })\n                ) {\n                    save_Object.lastLocation = 'pokegym'\n                    save_SaveObj();\n                    window.location = 'battle.html';\n                    break;\n                }\n            }\n            // Collision Detection for Pokemarket\n            for (let i = 0; i < PokemarketZone.length; i++) {\n                const PokeMarketZne = PokemarketZone[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: PokeMarketZne,\n                    })\n                ) {\n                    save_Object.lastLocation = 'pokemarket'\n                    save_SaveObj();\n                    window.location = 'pokemarkt.html';\n                    break;\n                }\n            }\n            if (moving)\n                movables.forEach((movable) => {\n                    movable.position.x += 3;\n                });\n        } else if (keys.s.pressed && lastKey === 's') {\n            player.moving = true;\n            player.image = player.sprites.down;\n            for (let i = 0; i < boundaries.length; i++) {\n                const boundary = boundaries[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: {\n                            ...boundary,\n                            position: {\n                                x: boundary.position.x,\n                                y: boundary.position.y - 3,\n                            },\n                        },\n                    })\n                ) {\n                    moving = false;\n                    break;\n                }\n            }\n            // Collision Detection for Battlezone\n            for (let i = 0; i < battleZones.length; i++) {\n                const battleZone = battleZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: battleZone,\n                    })\n                ) {\n                    const rnd_BattleTrigger = Math.random();\n                    if (rnd_BattleTrigger < 0.01) {\n                        battle.initiated = true;\n                        player.moving = false;\n                        bttleEffect.classList.add('active');\n                        setTimeout(() => {\n                            save_Object.lastLocation = 'battlezone'\n                            save_SaveObj();\n                            window.location = 'battle.html';\n                        }, 2000);\n                    }\n                    break;\n                }\n            }\n            // Collision Detection for Pokecenter\n            for (let i = 0; i < PokecenterZone.length; i++) {\n                const PokecenterZne = PokecenterZone[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: PokecenterZne,\n                    })\n                ) {\n                    save_Object.lastLocation = 'pokecenter'\n                    save_SaveObj();\n                    window.location = 'pokecenter.html';\n                    break;\n                }\n            }\n            // Collision Detection for PokeGym\n            for (let i = 0; i < PokeGymZones.length; i++) {\n                const PokegymZone = PokeGymZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: PokegymZone,\n                    })\n                ) {\n                    save_Object.lastLocation = 'pokegym'\n                    save_SaveObj();\n                    window.location = 'battle.html';\n                    break;\n                }\n            }\n            // Collision Detection for Pokemarket\n            for (let i = 0; i < PokemarketZone.length; i++) {\n                const PokeMarketZne = PokemarketZone[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: PokeMarketZne,\n                    })\n                ) {\n                    save_Object.lastLocation = 'pokemarket'\n                    save_SaveObj();\n                    window.location = 'pokemarkt.html';\n                    break;\n                }\n            }\n            if (moving)\n                movables.forEach((movable) => {\n                    movable.position.y -= 3;\n                });\n        } else if (keys.d.pressed && lastKey === 'd') {\n            player.moving = true;\n            player.image = player.sprites.right;\n            for (let i = 0; i < boundaries.length; i++) {\n                const boundary = boundaries[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: {\n                            ...boundary,\n                            position: {\n                                x: boundary.position.x - 3,\n                                y: boundary.position.y,\n                            },\n                        },\n                    })\n                ) {\n                    moving = false;\n                    break;\n                }\n            }\n            // Collision Detection for Battlezone\n            for (let i = 0; i < battleZones.length; i++) {\n                const battleZone = battleZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: battleZone,\n                    })\n                ) {\n                    const rnd_BattleTrigger = Math.random();\n                    if (rnd_BattleTrigger < 0.01) {\n                        battle.initiated = true;\n                        player.moving = false;\n                        bttleEffect.classList.add('active');\n                        setTimeout(() => {\n                            save_Object.lastLocation = 'battlezone'\n                            save_SaveObj();\n                            window.location = 'battle.html';\n                        }, 2000);\n                    }\n                    break;\n                }\n            }\n            // Collision Detection for Pokecenter\n            for (let i = 0; i < PokecenterZone.length; i++) {\n                const PokecenterZne = PokecenterZone[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: PokecenterZne,\n                    })\n                ) {\n                    save_Object.lastLocation = 'pokecenter'\n                    save_SaveObj();\n                    window.location = 'pokecenter.html';\n                    break;\n                }\n            }\n            // Collision Detection for PokeGym\n            for (let i = 0; i < PokeGymZones.length; i++) {\n                const PokegymZone = PokeGymZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: PokegymZone,\n                    })\n                ) {\n                    save_Object.lastLocation = 'pokegym'\n                    save_SaveObj();\n                    window.location = 'battle.html';\n                    break;\n                }\n            }\n            // Collision Detection for Pokemarket\n            for (let i = 0; i < PokemarketZone.length; i++) {\n                const PokeMarketZne = PokemarketZone[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: PokeMarketZne,\n                    })\n                ) {\n                    save_Object.lastLocation = 'pokemarket'\n                    save_SaveObj();\n                    window.location = 'pokemarkt.html';\n                    break;\n                }\n            }\n            if (moving)\n                movables.forEach((movable) => {\n                    movable.position.x -= 3;\n                });\n        }\n    }\n\n    animate();\n\n    let lastKey = '';\n    window.addEventListener('keydown', (e) => {\n        switch (e.key) {\n            case 'w':\n                keys.w.pressed = true;\n                lastKey = 'w';\n                break;\n            case 'a':\n                keys.a.pressed = true;\n                lastKey = 'a';\n                break;\n            case 's':\n                keys.s.pressed = true;\n                lastKey = 's';\n                break;\n            case 'd':\n                keys.d.pressed = true;\n                lastKey = 'd';\n                break;\n\n            default:\n                break;\n        }\n    });\n\n    ////////////////////////////////////////////////////////\n    // Klasse um gedrückte Taste triggern\n    class ClickAndHold {\n        constructor(EventTarget, callback) {\n            this.EventTarget = EventTarget;\n            this.callback = callback;\n            this.isHeld = false;\n            this.activeHoldTimeoutId = null;\n\n            ['mousedown', 'touchstart'].forEach((type) => {\n                this.EventTarget.addEventListener(\n                    type,\n                    this._onHoldStart.bind(this),\n                );\n            });\n\n            [\n                'mouseup',\n                'mouseleave',\n                'mouseout',\n                'touchend',\n                'touchcancel',\n            ].forEach((type) => {\n                this.EventTarget.addEventListener(\n                    type,\n                    this._onHoldEnd.bind(this),\n                );\n            });\n        }\n\n        _onHoldStart() {\n            this.isHeld = true;\n\n            this.activeHoldTimeoutId = setTimeout(() => {\n                if (this.isHeld) {\n                    this.callback();\n                }\n            }, 200);\n        }\n\n        _onHoldEnd() {\n            this.isHeld = false;\n            clearTimeout(this.activeHoldTimeoutId);\n            keys.w.pressed = false;\n            keys.a.pressed = false;\n            keys.s.pressed = false;\n            keys.d.pressed = false;\n        }\n    }\n\n    const upBtn = document.getElementById('up');\n    const leftBtn = document.getElementById('left');\n    const downBtn = document.getElementById('down');\n    const rightBtn = document.getElementById('right');\n\n    document.addEventListener('DOMContentLoaded', function () {\n        document.querySelector('div').addEventListener(\n            'contextmenu',\n            function (e) {\n                // Alternative\n                e.preventDefault();\n            },\n            false,\n        );\n    });\n\n    new ClickAndHold(upBtn, () => {\n        keys.w.pressed = true;\n        lastKey = 'w';\n    });\n    new ClickAndHold(leftBtn, () => {\n        keys.a.pressed = true;\n        lastKey = 'a';\n    });\n    new ClickAndHold(downBtn, () => {\n        keys.s.pressed = true;\n        lastKey = 's';\n    });\n    new ClickAndHold(rightBtn, () => {\n        keys.d.pressed = true;\n        lastKey = 'd';\n    });\n\n    ////////////////////////////////////////////////////////\n\n\n    window.addEventListener('keyup', (e) => {\n        switch (e.key) {\n            case 'w':\n                keys.w.pressed = false;\n                break;\n            case 'a':\n                keys.a.pressed = false;\n                break;\n            case 's':\n                keys.s.pressed = false;\n                break;\n            case 'd':\n                keys.d.pressed = false;\n                break;\n\n            default:\n                break;\n        }\n    });\n}\n\n\n//######################################################\n// Macht den Anfangsbuchstaben groß\n//######################################################\nfunction makeFirstLetterBig(word) {\n    const firstLetter = word[0];\n    let exportword = firstLetter.toUpperCase();\n    for (let i = 1; i < word.length; i++) {\n        exportword += word[i];\n    }\n    return exportword;\n}\n\n\n//# sourceURL=webpack://project-template/./src/js/game-map1.js?");

/***/ }),

/***/ "./src/js/pokecenter.js":
/*!******************************!*\
  !*** ./src/js/pokecenter.js ***!
  \******************************/
/***/ (() => {

eval("const canvas2 = document.getElementById('canvas2');\nconst collisions = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 505, 505, 505, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 505, 505, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 505, 505, 505, 505, 505, 505, 505, 505, 505, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 505, 505, 505, 505, 505, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 505, 505, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 505, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 505, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 505, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 505, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 505, 505, 505, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 505, 505, 505, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 505, 505, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 505, 505, 0, 0, 505, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nconst battleZoneData = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 506, 506, 506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 506, 506, 506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nconst exitZoneData = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5061, 5061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nconst healingEffect = document.getElementById('healingEffect');\nlet infoBox = document.getElementById('infoBox');\n\nlet save_Object = {\n    today_Date: '',\n    myPokemonTeam: [],\n    myCatchedPokemons: [],\n    allFacedPokemons: [],\n    allPokemonMoves: [],\n    today_Pokemons: [],\n    items: {\n        pokeballs: 60,\n        money: 100,\n        beleber: 5,\n        trank: 5,\n        bonbon: 3,\n    },\n    gen: 'all',\n};\n\nlet myTeam = [];\nlet myCatchedPokemons = [];\n\nif (canvas2) {\n    window.onload = init();\n\n    function init() {\n        if (document.getElementById('pokecenterTag')) {\n            load_SaveObj();\n        }\n    }\n\n    function load_SaveObj() {\n        if (localStorage.getItem('stored_save_Object') != null) {\n            save_Object = JSON.parse(\n                localStorage.getItem('stored_save_Object'),\n            );\n            myTeam = save_Object.myPokemonTeam;\n            myCatchedPokemons = save_Object.myCatchedPokemons;\n\n            try {\n                renderTeam();\n            } catch (error) {}\n        }\n    }\n\n    function save_SaveObj() {\n        localStorage.setItem('stored_save_Object', JSON.stringify(save_Object));\n        console.log('SaveObj', save_Object);\n    }\n\n    function renderTeam() {\n        for (let i = 0; i < myTeam.length; i++) {\n            document.getElementById(`teamPoke_${i}`).src =\n                myTeam[i].spriteFront;\n                document.getElementById(`teamPokeName_${i}`).innerHTML = makeFirstLetterBig(myTeam[i].name)\n                let hpInPercent = myTeam[i].hp * 100 / myTeam[i].maxHp\n                document.getElementById(`teamPokeProgress_${i}`).value = hpInPercent\n            if (myTeam[i].isDefeated === true) {\n                document\n                    .getElementById(`teamPoke_${i}`)\n                    .classList.add('defeat');\n            }\n        }\n    }\n\n    canvas2.width = 400;\n    canvas2.height = 400;\n    const ctx = canvas2.getContext('2d');\n\n    ////////////////////////////////////////////////////////\n    // Create Collision map\n    const collisionMap = [];\n    for (let i = 0; i < collisions.length; i += 70) {\n        collisionMap.push(collisions.slice(i, 70 + i));\n    }\n\n    ////////////////////////////////////////////////////////\n\n    ////////////////////////////////////////////////////////\n    // Battlezone Map\n    const battlezoneMap = [];\n    for (let i = 0; i < battleZoneData.length; i += 70) {\n        battlezoneMap.push(battleZoneData.slice(i, 70 + i));\n    }\n\n    // Battlezone Map\n    const exitZoneMap = [];\n    for (let i = 0; i < exitZoneData.length; i += 70) {\n        exitZoneMap.push(exitZoneData.slice(i, 70 + i));\n    }\n\n\n    class Boundary {\n        static width = 28;\n        static height = 28;\n        constructor({position}) {\n            this.position = position;\n            this.width = 28;\n            this.height = 28; // Weil 8 x 3.5 Zoomstufe bei TileMap\n        }\n\n        draw() {\n            ctx.fillStyle = 'rgba(255,0,0,0.0)';\n            ctx.fillRect(\n                this.position.x,\n                this.position.y,\n                this.width,\n                this.height,\n            );\n        }\n    }\n\n    const boundaries = [];\n    const offset = {\n        x: -1210,\n        y: -600,\n    };\n    collisionMap.forEach((row, i) => {\n        row.forEach((symbol, j) => {\n            if (symbol === 505) {\n                boundaries.push(\n                    new Boundary({\n                        position: {\n                            x: j * Boundary.width + offset.x,\n                            y: i * Boundary.height + offset.y,\n                        },\n                    }),\n                );\n            }\n        });\n    });\n\n    const battleZones = [];\n    battlezoneMap.forEach((row, i) => {\n        row.forEach((symbol, j) => {\n            if (symbol === 506) {\n                battleZones.push(\n                    new Boundary({\n                        position: {\n                            x: j * Boundary.width + offset.x,\n                            y: i * Boundary.height + offset.y,\n                        },\n                    }),\n                );\n            }\n        });\n    });\n\n    const exitZones = [];\n    exitZoneMap.forEach((row, i) => {\n        row.forEach((symbol, j) => {\n            if (symbol === 5061) {\n                exitZones.push(\n                    new Boundary({\n                        position: {\n                            x: j * Boundary.width + offset.x,\n                            y: i * Boundary.height + offset.y,\n                        },\n                    }),\n                );\n            }\n        });\n    });\n\n\n    const image = new Image();\n    image.src = './assets/Pokecenter2.png';\n\n    const playerDownImage = new Image();\n    playerDownImage.src = './assets/playerDown.png';\n\n    const playerUpImage = new Image();\n    playerUpImage.src = './assets/playerUp.png';\n\n    const playerLeftImage = new Image();\n    playerLeftImage.src = './assets/playerLeft.png';\n\n    const playerRightImage = new Image();\n    playerRightImage.src = './assets/playerRight.png';\n\n    class Sprite {\n        constructor({\n            position,\n            velocity,\n            image,\n            frames = {max: 1},\n            sprites = [],\n        }) {\n            this.position = position;\n            this.image = image;\n            this.frames = {...frames, val: 0, elapsed: 0};\n\n            this.image.onload = () => {\n                this.width = this.image.width / this.frames.max;\n                this.height = this.image.height;\n            };\n            this.moving = false;\n            this.sprites = sprites;\n        }\n\n        draw() {\n            ctx.drawImage(\n                this.image,\n                this.frames.val * this.width,\n                0,\n                this.image.width / this.frames.max,\n                this.image.height,\n                this.position.x,\n                this.position.y,\n                this.image.width / this.frames.max,\n                this.image.height,\n            );\n            if (this.moving === true) {\n                if (this.frames.max > 1) {\n                    this.frames.elapsed++;\n                }\n                if (this.frames.elapsed % 10 === 0) {\n                    if (this.frames.val < this.frames.max - 1) {\n                        this.frames.val++;\n                    } else {\n                        this.frames.val = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    const player = new Sprite({\n        position: {\n            x: canvas2.width / 2 - 183 / 3,\n            y: canvas2.height / 2 - 62 / 2,\n        },\n        image: playerUpImage,\n        frames: {\n            max: 3,\n        },\n        sprites: {\n            up: playerUpImage,\n            left: playerLeftImage,\n            down: playerDownImage,\n            right: playerRightImage,\n        },\n    });\n\n    const background = new Sprite({\n        position: {\n            x: offset.x,\n            y: offset.y,\n        },\n        image: image,\n    });\n\n    const keys = {\n        w: {\n            pressed: false,\n        },\n        a: {\n            pressed: false,\n        },\n        s: {\n            pressed: false,\n        },\n        d: {\n            pressed: false,\n        },\n    };\n\n    const movables = [background, ...boundaries, ...battleZones, ...exitZones];\n\n    function rectangularCollision({rectangle1, rectangle2}) {\n        return (\n            rectangle1.position.x + rectangle1.width >= rectangle2.position.x &&\n            rectangle1.position.x <= rectangle2.position.x + rectangle2.width &&\n            rectangle1.position.y <=\n                rectangle2.position.y + rectangle2.height &&\n            rectangle1.position.y + rectangle1.height >= rectangle2.position.y\n        );\n    }\n\n    const healing = {\n        initiated: false,\n    };\n\n    // Animation loop\n    function animate() {\n        window.requestAnimationFrame(animate);\n\n        // Draw Methods\n        background.draw();\n\n        battleZones.forEach((battlezone) => {\n            battlezone.draw();\n        });\n\n        exitZones.forEach((exitZone) => {\n            exitZone.draw();\n        });\n\n        player.draw();\n\n        boundaries.forEach((boundary) => {\n            boundary.draw();\n        });\n\n        let moving = true;\n        player.moving = false;\n\n        if (healing.initiated) return;\n        if (keys.w.pressed && lastKey === 'w') {\n            player.moving = true;\n            player.image = player.sprites.up;\n            for (let i = 0; i < boundaries.length; i++) {\n                const boundary = boundaries[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: {\n                            ...boundary,\n                            position: {\n                                x: boundary.position.x,\n                                y: boundary.position.y + 3,\n                            },\n                        },\n                    })\n                ) {\n                    moving = false;\n                    break;\n                }\n            }\n\n            // Collision Detection for Battlezone\n            for (let i = 0; i < battleZones.length; i++) {\n                const battleZone = battleZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: battleZone,\n                    })\n                ) {\n                    healFunc()\n                    break;\n                }\n            }\n            // Collision Detection for Exit\n            for (let i = 0; i < exitZones.length; i++) {\n                const exitZone = exitZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: exitZone,\n                    })\n                ) {\n                    window.location = 'map1.html'\n                    break;\n                }\n            }\n            if (moving)\n                movables.forEach((movable) => {\n                    movable.position.y += 3;\n                });\n        } else if (keys.a.pressed && lastKey === 'a') {\n            player.moving = true;\n            player.image = player.sprites.left;\n            for (let i = 0; i < boundaries.length; i++) {\n                const boundary = boundaries[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: {\n                            ...boundary,\n                            position: {\n                                x: boundary.position.x + 3,\n                                y: boundary.position.y,\n                            },\n                        },\n                    })\n                ) {\n                    moving = false;\n                    break;\n                }\n            }\n            // Collision Detection for Battlezone\n            for (let i = 0; i < battleZones.length; i++) {\n                const battleZone = battleZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: battleZone,\n                    })\n                ) {\n                    healFunc()\n                    break;\n                }\n            }\n            // Collision Detection for Exit\n            for (let i = 0; i < exitZones.length; i++) {\n                const exitZone = exitZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: exitZone,\n                    })\n                ) {\n                    window.location = 'map1.html'\n                    break;\n                }\n            }\n            if (moving)\n                movables.forEach((movable) => {\n                    movable.position.x += 3;\n                });\n        } else if (keys.s.pressed && lastKey === 's') {\n            player.moving = true;\n            player.image = player.sprites.down;\n            for (let i = 0; i < boundaries.length; i++) {\n                const boundary = boundaries[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: {\n                            ...boundary,\n                            position: {\n                                x: boundary.position.x,\n                                y: boundary.position.y - 3,\n                            },\n                        },\n                    })\n                ) {\n                    moving = false;\n                    break;\n                }\n            }\n            // Collision Detection for Battlezone\n            for (let i = 0; i < battleZones.length; i++) {\n                const battleZone = battleZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: battleZone,\n                    })\n                ) {\n                    healFunc()\n                    break;\n                }\n            }\n            // Collision Detection for Exit\n            for (let i = 0; i < exitZones.length; i++) {\n                const exitZone = exitZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: exitZone,\n                    })\n                ) {\n                    window.location = 'map1.html'\n                    break;\n                }\n            }\n            if (moving)\n                movables.forEach((movable) => {\n                    movable.position.y -= 3;\n                });\n        } else if (keys.d.pressed && lastKey === 'd') {\n            player.moving = true;\n            player.image = player.sprites.right;\n            for (let i = 0; i < boundaries.length; i++) {\n                const boundary = boundaries[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: {\n                            ...boundary,\n                            position: {\n                                x: boundary.position.x - 3,\n                                y: boundary.position.y,\n                            },\n                        },\n                    })\n                ) {\n                    moving = false;\n                    break;\n                }\n            }\n            // Collision Detection for Battlezone\n            for (let i = 0; i < battleZones.length; i++) {\n                const battleZone = battleZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: battleZone,\n                    })\n                ) {\n                    healFunc()\n                    break;\n                }\n            }\n            // Collision Detection for Exit\n            for (let i = 0; i < exitZones.length; i++) {\n                const exitZone = exitZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: exitZone,\n                    })\n                ) {\n                    window.location = 'map1.html'\n                    break;\n                }\n            }\n            if (moving)\n                movables.forEach((movable) => {\n                    movable.position.x -= 3;\n                });\n        }\n    }\n\n    animate();\n\n    let lastKey = '';\n    window.addEventListener('keydown', (e) => {\n        switch (e.key) {\n            case 'w':\n                keys.w.pressed = true;\n                lastKey = 'w';\n                break;\n            case 'a':\n                keys.a.pressed = true;\n                lastKey = 'a';\n                break;\n            case 's':\n                keys.s.pressed = true;\n                lastKey = 's';\n                break;\n            case 'd':\n                keys.d.pressed = true;\n                lastKey = 'd';\n                break;\n\n            default:\n                break;\n        }\n    });\n\n\n    function healFunc() {\n        healing.initiated = true;\n        player.moving = false;\n        animate_Healing();\n        for(let i = 0; i < myTeam.length; i++) {\n            myTeam[i].isDefeated = false;\n            myTeam[i].hp = myTeam[i].maxHp;\n        }\n        for(let i = 0; i < myCatchedPokemons.length; i++) {\n            myCatchedPokemons[i].isDefeated = false;\n            myCatchedPokemons[i].hp = myCatchedPokemons[i].maxHp;\n        }\n\n        for(let i = 0; i < save_Object.myCatchedPokemons.length; i++) {\n            save_Object.myCatchedPokemons[i].hp = save_Object.myCatchedPokemons[i].maxHp;\n        }\n\n        for(let i = 0; i < save_Object.myPokemonTeam.length; i++) {\n            save_Object.myPokemonTeam[i].hp = save_Object.myPokemonTeam[i].maxHp;\n            save_Object.myPokemonTeam[i].isDefeated = false;\n            document.getElementById(`teamPoke_${i}`).classList.remove(\"defeat\");\n        }\n        save_SaveObj();\n        setTimeout(() => {\n            showInfoBox('Deine Pokemon werden geheilt');\n        }, 100);\n        setTimeout(() => {\n            window.location = 'map1.html';\n        }, 4000);\n    }\n\n    function animate_Healing() {\n        image.src = './assets/Pokecenter_pbVisible.png';\n        setTimeout(() => {\n            image.src = './assets/Pokecenter_pbInvisible.png';\n        }, 400);\n        setTimeout(() => {\n            image.src = './assets/Pokecenter_pbVisible.png';\n        }, 800);\n        setTimeout(() => {\n            image.src = './assets/Pokecenter_pbInvisible.png';\n        }, 1200);\n        setTimeout(() => {\n            image.src = './assets/Pokecenter_pbVisible.png';\n        }, 1600);\n\n    }\n\n    ////////////////////////////////////////////////////////\n    // Klasse um gedrückte Taste triggern\n    class ClickAndHold {\n        constructor(EventTarget, callback) {\n            this.EventTarget = EventTarget;\n            this.callback = callback;\n            this.isHeld = false;\n            this.activeHoldTimeoutId = null;\n\n            ['mousedown', 'touchstart'].forEach((type) => {\n                this.EventTarget.addEventListener(\n                    type,\n                    this._onHoldStart.bind(this),\n                );\n            });\n\n            [\n                'mouseup',\n                'mouseleave',\n                'mouseout',\n                'touchend',\n                'touchcancel',\n            ].forEach((type) => {\n                this.EventTarget.addEventListener(\n                    type,\n                    this._onHoldEnd.bind(this),\n                );\n            });\n        }\n\n        _onHoldStart() {\n            this.isHeld = true;\n\n            this.activeHoldTimeoutId = setTimeout(() => {\n                if (this.isHeld) {\n                    this.callback();\n                }\n            }, 200);\n        }\n\n        _onHoldEnd() {\n            this.isHeld = false;\n            clearTimeout(this.activeHoldTimeoutId);\n            keys.w.pressed = false;\n            keys.a.pressed = false;\n            keys.s.pressed = false;\n            keys.d.pressed = false;\n        }\n    }\n\n    const upBtn = document.getElementById('up');\n    const leftBtn = document.getElementById('left');\n    const downBtn = document.getElementById('down');\n    const rightBtn = document.getElementById('right');\n\n    document.addEventListener('DOMContentLoaded', function () {\n        document.querySelector('div').addEventListener(\n            'contextmenu',\n            function (e) {\n                // Alternative\n                e.preventDefault();\n            },\n            false,\n        );\n    });\n\n    new ClickAndHold(upBtn, () => {\n        keys.w.pressed = true;\n        lastKey = 'w';\n    });\n    new ClickAndHold(leftBtn, () => {\n        keys.a.pressed = true;\n        lastKey = 'a';\n    });\n    new ClickAndHold(downBtn, () => {\n        keys.s.pressed = true;\n        lastKey = 's';\n    });\n    new ClickAndHold(rightBtn, () => {\n        keys.d.pressed = true;\n        lastKey = 'd';\n    });\n\n    ////////////////////////////////////////////////////////\n\n\n    window.addEventListener('keyup', (e) => {\n        switch (e.key) {\n            case 'w':\n                keys.w.pressed = false;\n                break;\n            case 'a':\n                keys.a.pressed = false;\n                break;\n            case 's':\n                keys.s.pressed = false;\n                break;\n            case 'd':\n                keys.d.pressed = false;\n                break;\n\n            default:\n                break;\n        }\n    });\n\n\n    function showInfoBox(text) {\n        infoBox.hidden = false;\n        infoBox.innerHTML = text;\n        setTimeout(() => {\n            infoBox.hidden = true;\n        }, 4000);\n    }\n}\n\n\n\n//######################################################\n// Macht den Anfangsbuchstaben groß\n//######################################################\nfunction makeFirstLetterBig(word) {\n    const firstLetter = word[0];\n    let exportword = firstLetter.toUpperCase();\n    for (let i = 1; i < word.length; i++) {\n        exportword += word[i];\n    }\n    return exportword;\n}\n\n//# sourceURL=webpack://project-template/./src/js/pokecenter.js?");

/***/ }),

/***/ "./src/js/pokedex.js":
/*!***************************!*\
  !*** ./src/js/pokedex.js ***!
  \***************************/
/***/ (() => {

eval("facedPokemons = [];\nlet myTeam = [];\nlet pokemonByID = []\n\nlet save_Object = {\n    today_Date: '',\n    myPokemonTeam: [],\n    myCatchedPokemons: [],\n    allFacedPokemons: [],\n    allPokemonMoves: [],\n    today_Pokemons: [],\n    items: {\n        pokeballs: 60,\n        money: 100,\n        beleber: 5,\n        trank: 5,\n        bonbon: 3\n    },\n    gen: 'all'\n};\n\nwindow.onload = init();\n\nfunction init() {\n    if (document.getElementById('pokedexTag')) {\n        loadFacedPokemons();\n    }\n}\n\nfunction loadFacedPokemons() {\n    if (localStorage.getItem('stored_save_Object') != null) {\n        save_Object = JSON.parse(localStorage.getItem('stored_save_Object'));\n        facedPokemons = save_Object.allFacedPokemons;\n        console.log('facedPokemons', facedPokemons);\n        pokemonByID = facedPokemons.slice(0);\n        pokemonByID.sort(function(a,b) {\n            return a.id - b.id;\n        });\n\n        myTeam = save_Object.myPokemonTeam;\n        loadMyTeam();\n        renderPokeCards();\n    }else {\n        console.log('Konnte nicht geladen werden');\n    }\n}\n\n//myPokemonTeam\nfunction loadMyTeam() {\n    for (let i = 0; i < myTeam.length; i++) {\n        document.getElementById(`teamPoke_${i}`).src = myTeam[i].spriteFront;\n        document.getElementById(`teamPokeName_${i}`).innerHTML = makeFirstLetterBig(myTeam[i].name)\n        let hpInPercent = myTeam[i].hp * 100 / myTeam[i].maxHp\n        document.getElementById(`teamPokeProgress_${i}`).value = hpInPercent\n    }\n}\n\nfunction renderPokeCards() {\n    let pokeId = 0;\n    let pokename = '';\n    let pokelevel = 0;\n    let poketype = '';\n    let stats = '';\n\n    console.log(facedPokemons);\n\n    for (let i = 0; i < pokemonByID.length; i++) {\n        pokeId = pokemonByID[i].id;\n        pokename = pokemonByID[i].name;\n        pokelevel = pokemonByID[i].level;\n        poketype = pokemonByID[i].type;\n        stats = `Ang:${pokemonByID[i].statAttack} Ver:${pokemonByID[i].statDefense} Kp:${pokemonByID[i].hp}`\n        buildCard(pokeId, pokename, pokelevel, poketype, stats);\n    }\n}\n\nfunction buildCard(id, name, level, type, stats) {\n    let cont = document.createElement('div');\n    let txtlbl = document.createElement('p');\n    let imgP = document.createElement('img');\n    txtlbl.innerText = `${makeFirstLetterBig(name)} Nr.${id} \\n Typ: ${makeFirstLetterBig(type)} \\n ${stats}`;\n    txtlbl.classList.add('pokedexName');\n    imgP.src = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;\n    cont.appendChild(imgP);\n    cont.appendChild(document.createTextNode(name));\n    cont.classList.add('container');\n    cont.classList.add(addColorClass(type));\n    cont.appendChild(txtlbl);\n    let card = document.getElementById('cards');\n    card.appendChild(cont);\n}\n\nfunction addColorClass(type) {\n    if (type === '') {\n    }\n\n    switch (type) {\n        case 'fire':\n            return 'orangeContainer';\n            break;\n        case 'water':\n            return 'blueContainer';\n            break;\n        case 'bug':\n            return 'greenContainer';\n            break;\n        case 'grass':\n            return 'greenContainer';\n            break;\n        case 'ground':\n            return 'brownContainer';\n            break;\n        case 'poison':\n            return 'purpleContainer';\n            break;\n        case 'rock':\n            return 'brownContainer';\n            break;\n        case 'electric':\n            return 'yellowContainer';\n            break;\n\n        default:\n            return 'greyContainer';\n            break;\n    }\n}\n\n\n//######################################################\n// Macht den Anfangsbuchstaben groß\n//######################################################\nfunction makeFirstLetterBig(word) {\n    const firstLetter = word[0];\n    let exportword = firstLetter.toUpperCase();\n    for (let i = 1; i < word.length; i++) {\n        exportword += word[i];\n    }\n    return exportword;\n}\n\n\n//# sourceURL=webpack://project-template/./src/js/pokedex.js?");

/***/ }),

/***/ "./src/js/pokemarkt.js":
/*!*****************************!*\
  !*** ./src/js/pokemarkt.js ***!
  \*****************************/
/***/ (() => {

eval("const canvas3 = document.getElementById('canvas3');\nconst collisions = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    24377, 24377, 24377, 24377, 24377, 24377, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    24377, 0, 0, 0, 0, 0, 0, 24377, 24377, 24377, 24377, 24377, 24377, 24377,\n    24377, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377,\n    24377, 24377, 24377, 24377, 24377, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 24377, 0, 0, 0, 0, 0,\n    24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 24377, 24377, 24377, 0, 0, 0, 0, 24377,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 24377, 24377, 24377, 24377, 0, 0, 0, 0, 24377, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 24377, 24377, 24377, 24377, 0, 0, 0, 0, 24377, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24377, 24377, 24377, 24377, 24377,\n    24377, 24377, 0, 0, 0, 0, 24377, 24377, 24377, 24377, 24377, 24377, 24377,\n    24377, 24377, 24377, 24377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0,\n];\n\nconst buyingZoneData = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nconst exitData = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243781, 243781, 243781, 243781, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nconst buyingEffect = document.getElementById('buyingEffect');\nlet infoBox = document.getElementById('infoBox');\nconst pokeballPrice = 20;\nconst trankPrice = 50;\nconst beleberPrice = 70;\nconst bonbonPrice = 100;\n\nconst lbl_Money = document.getElementById(\"lbl_Money\");\nconst lbl_Shop_Money = document.getElementById(\"lbl_Shop_Money\");\nconst shopWindow = document.getElementById(\"shopWindow\");\nconst btnCloseShop = document.getElementById(\"btnCloseShop\");\nconst btn_open_Shop = document.getElementById(\"btn_open_Shop\");\nconst btn_Pokeball = document.getElementById(\"btn_Pokeball\");\nconst btn_Trank = document.getElementById(\"btn_Trank\");\nconst lbl_Amount_Pokeballs = document.getElementById(\"lbl_Amount_Pokeballs\");\nconst lbl_Amount_Tranks = document.getElementById(\"lbl_Amount_Tranks\");\nconst btn_Buy = document.getElementById(\"btn_Buy\");\n\nlet save_Object = {\n    today_Date: '',\n    myPokemonTeam: [],\n    myCatchedPokemons: [],\n    allFacedPokemons: [],\n    allPokemonMoves: [],\n    today_Pokemons: [],\n    items: {\n        pokeballs: 60,\n        money: 100,\n        beleber: 5,\n        trank: 5,\n        bonbon: 3,\n    },\n    gen: 'all',\n};\n\nlet myTeam = [];\nlet myCatchedPokemons = [];\n\nif (canvas3) {\n    window.onload = init();\n\n    function init() {\n        if (document.getElementById('pokeMarktTag')) {\n            load_SaveObj();\n        }\n    }\n\n    function load_SaveObj() {\n        if (localStorage.getItem('stored_save_Object') != null) {\n            save_Object = JSON.parse(\n                localStorage.getItem('stored_save_Object'),\n            );\n            myTeam = save_Object.myPokemonTeam;\n            myCatchedPokemons = save_Object.myCatchedPokemons;\n\n            try {\n                renderTeam();\n            } catch (error) {}\n        }\n    }\n\n    function save_SaveObj() {\n        localStorage.setItem('stored_save_Object', JSON.stringify(save_Object));\n        console.log('SaveObj', save_Object);\n    }\n\n    function renderTeam() {\n        for (let i = 0; i < myTeam.length; i++) {\n            document.getElementById(`teamPoke_${i}`).src =\n                myTeam[i].spriteFront;\n                document.getElementById(`teamPokeName_${i}`).innerHTML = makeFirstLetterBig(myTeam[i].name)\n                let hpInPercent = myTeam[i].hp * 100 / myTeam[i].maxHp\n                document.getElementById(`teamPokeProgress_${i}`).value = hpInPercent\n            if (myTeam[i].isDefeated === true) {\n                document\n                    .getElementById(`teamPoke_${i}`)\n                    .classList.add('defeat');\n            }\n        }\n    }\n\n    canvas3.width = 400;\n    canvas3.height = 400;\n    const ctx = canvas3.getContext('2d');\n\n    ////////////////////////////////////////////////////////\n    // Create Collision map\n    const collisionMap = [];\n    for (let i = 0; i < collisions.length; i += 41) {\n        collisionMap.push(collisions.slice(i, 41 + i));\n    }\n\n    ////////////////////////////////////////////////////////\n\n    ////////////////////////////////////////////////////////\n    // buyingzone Map\n    const buyingzoneMap = [];\n    for (let i = 0; i < buyingZoneData.length; i += 41) {\n        buyingzoneMap.push(buyingZoneData.slice(i, 41 + i));\n    }\n\n    // Exit Map\n    const exitDataMap = [];\n    for (let i = 0; i < exitData.length; i += 41) {\n        exitDataMap.push(exitData.slice(i, 41 + i));\n    }\n\n\n    class Boundary {\n        static width = 28;\n        static height = 28;\n        constructor({position}) {\n            this.position = position;\n            this.width = 28;\n            this.height = 28; // Weil 8 x 3.5 Zoomstufe bei TileMap\n        }\n\n        draw() {\n            ctx.fillStyle = 'rgba(255,0,0,0.0)';\n            ctx.fillRect(\n                this.position.x,\n                this.position.y,\n                this.width,\n                this.height,\n            );\n        }\n    }\n\n    const boundaries = [];\n    const offset = {\n        x: -350,\n        y: -450,\n    };\n    collisionMap.forEach((row, i) => {\n        row.forEach((symbol, j) => {\n            if (symbol === 24377) {\n                boundaries.push(\n                    new Boundary({\n                        position: {\n                            x: j * Boundary.width + offset.x,\n                            y: i * Boundary.height + offset.y,\n                        },\n                    }),\n                );\n            }\n        });\n    });\n\n    const buyingZones = [];\n    buyingzoneMap.forEach((row, i) => {\n        row.forEach((symbol, j) => {\n            if (symbol === 24378) {\n                buyingZones.push(\n                    new Boundary({\n                        position: {\n                            x: j * Boundary.width + offset.x,\n                            y: i * Boundary.height + offset.y,\n                        },\n                    }),\n                );\n            }\n        });\n    });\n\n    const exitZones = [];\n    exitDataMap.forEach((row, i) => {\n        row.forEach((symbol, j) => {\n            if (symbol === 243781) {\n                exitZones.push(\n                    new Boundary({\n                        position: {\n                            x: j * Boundary.width + offset.x,\n                            y: i * Boundary.height + offset.y,\n                        },\n                    }),\n                );\n            }\n        });\n    });\n\n\n    const image = new Image();\n    image.src = './assets/pokemarkt.png';\n\n    const playerDownImage = new Image();\n    playerDownImage.src = './assets/playerDown.png';\n\n    const playerUpImage = new Image();\n    playerUpImage.src = './assets/playerUp.png';\n\n    const playerLeftImage = new Image();\n    playerLeftImage.src = './assets/playerLeft.png';\n\n    const playerRightImage = new Image();\n    playerRightImage.src = './assets/playerRight.png';\n\n    class Sprite {\n        constructor({\n            position,\n            velocity,\n            image,\n            frames = {max: 1},\n            sprites = [],\n        }) {\n            this.position = position;\n            this.image = image;\n            this.frames = {...frames, val: 0, elapsed: 0};\n\n            this.image.onload = () => {\n                this.width = this.image.width / this.frames.max;\n                this.height = this.image.height;\n            };\n            this.moving = false;\n            this.sprites = sprites;\n        }\n\n        draw() {\n            ctx.drawImage(\n                this.image,\n                this.frames.val * this.width,\n                0,\n                this.image.width / this.frames.max,\n                this.image.height,\n                this.position.x,\n                this.position.y,\n                this.image.width / this.frames.max,\n                this.image.height,\n            );\n            if (this.moving === true) {\n                if (this.frames.max > 1) {\n                    this.frames.elapsed++;\n                }\n                if (this.frames.elapsed % 10 === 0) {\n                    if (this.frames.val < this.frames.max - 1) {\n                        this.frames.val++;\n                    } else {\n                        this.frames.val = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    const player = new Sprite({\n        position: {\n            x: canvas3.width / 2 - 183 / 3,\n            y: canvas3.height / 2 - 62 / 2,\n        },\n        image: playerUpImage,\n        frames: {\n            max: 3,\n        },\n        sprites: {\n            up: playerUpImage,\n            left: playerLeftImage,\n            down: playerDownImage,\n            right: playerRightImage,\n        },\n    });\n\n    const background = new Sprite({\n        position: {\n            x: offset.x,\n            y: offset.y,\n        },\n        image: image,\n    });\n\n    const keys = {\n        w: {\n            pressed: false,\n        },\n        a: {\n            pressed: false,\n        },\n        s: {\n            pressed: false,\n        },\n        d: {\n            pressed: false,\n        },\n    };\n\n    const movables = [background, ...boundaries, ...buyingZones, ...exitZones];\n\n    function rectangularCollision({rectangle1, rectangle2}) {\n        return (\n            rectangle1.position.x + rectangle1.width >= rectangle2.position.x &&\n            rectangle1.position.x <= rectangle2.position.x + rectangle2.width &&\n            rectangle1.position.y <=\n                rectangle2.position.y + rectangle2.height &&\n            rectangle1.position.y + rectangle1.height >= rectangle2.position.y\n        );\n    }\n\n    const buying = {\n        initiated: false,\n    };\n\n    // Animation loop\n    function animate() {\n        window.requestAnimationFrame(animate);\n\n        // Draw Methods\n        background.draw();\n\n        buyingZones.forEach((buyingzone) => {\n            buyingzone.draw();\n        });\n\n        exitZones.forEach((exitZone) => {\n            exitZone.draw();\n        });\n\n        player.draw();\n\n        boundaries.forEach((boundary) => {\n            boundary.draw();\n        });\n\n        let moving = true;\n        player.moving = false;\n\n        if (buying.initiated) return;\n        if (keys.w.pressed && lastKey === 'w') {\n            player.moving = true;\n            player.image = player.sprites.up;\n            for (let i = 0; i < boundaries.length; i++) {\n                const boundary = boundaries[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: {\n                            ...boundary,\n                            position: {\n                                x: boundary.position.x,\n                                y: boundary.position.y + 3,\n                            },\n                        },\n                    })\n                ) {\n                    moving = false;\n                    break;\n                }\n            }\n\n            // Collision Detection for buyingzone\n            for (let i = 0; i < buyingZones.length; i++) {\n                const buyingZone = buyingZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: buyingZone,\n                    })\n                ) {\n                    healFunc();\n                    break;\n                }\n            }\n            // Collision Detection for EXITzone\n            for (let i = 0; i < exitZones.length; i++) {\n                const exitZone = exitZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: exitZone,\n                    })\n                ) {\n                    window.location = 'map1.html';\n                    break;\n                }\n            }\n            if (moving)\n                movables.forEach((movable) => {\n                    movable.position.y += 3;\n                });\n        } else if (keys.a.pressed && lastKey === 'a') {\n            player.moving = true;\n            player.image = player.sprites.left;\n            for (let i = 0; i < boundaries.length; i++) {\n                const boundary = boundaries[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: {\n                            ...boundary,\n                            position: {\n                                x: boundary.position.x + 3,\n                                y: boundary.position.y,\n                            },\n                        },\n                    })\n                ) {\n                    moving = false;\n                    break;\n                }\n            }\n            // Collision Detection for buyingzone\n            for (let i = 0; i < buyingZones.length; i++) {\n                const buyingZone = buyingZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: buyingZone,\n                    })\n                ) {\n                    healFunc();\n                    break;\n                }\n            }\n            // Collision Detection for EXITzone\n            for (let i = 0; i < exitZones.length; i++) {\n                const exitZone = exitZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: exitZone,\n                    })\n                ) {\n                    window.location = 'map1.html';\n                    break;\n                }\n            }\n            if (moving)\n                movables.forEach((movable) => {\n                    movable.position.x += 3;\n                });\n        } else if (keys.s.pressed && lastKey === 's') {\n            player.moving = true;\n            player.image = player.sprites.down;\n            for (let i = 0; i < boundaries.length; i++) {\n                const boundary = boundaries[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: {\n                            ...boundary,\n                            position: {\n                                x: boundary.position.x,\n                                y: boundary.position.y - 3,\n                            },\n                        },\n                    })\n                ) {\n                    moving = false;\n                    break;\n                }\n            }\n            // Collision Detection for buyingzone\n            for (let i = 0; i < buyingZones.length; i++) {\n                const buyingZone = buyingZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: buyingZone,\n                    })\n                ) {\n                    healFunc();\n                    break;\n                }\n            }\n            // Collision Detection for EXITzone\n            for (let i = 0; i < exitZones.length; i++) {\n                const exitZone = exitZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: exitZone,\n                    })\n                ) {\n                    window.location = 'map1.html';\n                    break;\n                }\n            }\n            if (moving)\n                movables.forEach((movable) => {\n                    movable.position.y -= 3;\n                });\n        } else if (keys.d.pressed && lastKey === 'd') {\n            player.moving = true;\n            player.image = player.sprites.right;\n            for (let i = 0; i < boundaries.length; i++) {\n                const boundary = boundaries[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: {\n                            ...boundary,\n                            position: {\n                                x: boundary.position.x - 3,\n                                y: boundary.position.y,\n                            },\n                        },\n                    })\n                ) {\n                    moving = false;\n                    break;\n                }\n            }\n            // Collision Detection for buyingzone\n            for (let i = 0; i < buyingZones.length; i++) {\n                const buyingZone = buyingZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: buyingZone,\n                    })\n                ) {\n                    healFunc();\n                    break;\n                }\n            }\n            // Collision Detection for EXITzone\n            for (let i = 0; i < exitZones.length; i++) {\n                const exitZone = exitZones[i];\n                if (\n                    rectangularCollision({\n                        rectangle1: player,\n                        rectangle2: exitZone,\n                    })\n                ) {\n                    window.location = 'map1.html';\n                    break;\n                }\n            }\n            if (moving)\n                movables.forEach((movable) => {\n                    movable.position.x -= 3;\n                });\n        }\n    }\n\n    animate();\n\n    let lastKey = '';\n    window.addEventListener('keydown', (e) => {\n        switch (e.key) {\n            case 'w':\n                keys.w.pressed = true;\n                lastKey = 'w';\n                break;\n            case 'a':\n                keys.a.pressed = true;\n                lastKey = 'a';\n                break;\n            case 's':\n                keys.s.pressed = true;\n                lastKey = 's';\n                break;\n            case 'd':\n                keys.d.pressed = true;\n                lastKey = 'd';\n                break;\n\n            default:\n                break;\n        }\n    });\n\n    function healFunc() {\n        // buying.initiated = true;\n        // player.moving = false;\n        // for (let i = 0; i < myTeam.length; i++) {\n        //     myTeam[i].isDefeated = false;\n        //     myTeam[i].hp = myTeam[i].maxHp;\n        // }\n        // for (let i = 0; i < myCatchedPokemons.length; i++) {\n        //     myCatchedPokemons[i].isDefeated = false;\n        //     myCatchedPokemons[i].hp = myCatchedPokemons[i].maxHp;\n        // }\n\n        // for (let i = 0; i < save_Object.myCatchedPokemons.length; i++) {\n        //     save_Object.myCatchedPokemons[i].hp =\n        //         save_Object.myCatchedPokemons[i].maxHp;\n        // }\n\n        // for (let i = 0; i < save_Object.myPokemonTeam.length; i++) {\n        //     save_Object.myPokemonTeam[i].hp =\n        //         save_Object.myPokemonTeam[i].maxHp;\n        //     save_Object.myPokemonTeam[i].isDefeated = false;\n        //     document.getElementById(`teamPoke_${i}`).classList.remove('defeat');\n        // }\n        // save_SaveObj();\n        // setTimeout(() => {\n        //     showInfoBox('Deine Pokemon werden geheilt');\n        // }, 100);\n        // setTimeout(() => {\n        //     window.location = 'map1.html';\n        // }, 4000);\n\n        shopWindow.classList.add(\"active\");\n        shopMoney = save_Object.items.money;\n        pokeballBuyAmount = 0;\n        trankBuyAmount = 0;\n        btn_Pokeball.innerHTML = `Pokeball - ${pokeballPrice}$`\n        btn_Trank.innerHTML = `Supertrank - ${trankPrice}$`\n        updateShop();\n\n    }\n\n\n\n    ////////////////////////////////////////////////////////\n    // Klasse um gedrückte Taste triggern\n    class ClickAndHold {\n        constructor(EventTarget, callback) {\n            this.EventTarget = EventTarget;\n            this.callback = callback;\n            this.isHeld = false;\n            this.activeHoldTimeoutId = null;\n\n            ['mousedown', 'touchstart'].forEach((type) => {\n                this.EventTarget.addEventListener(\n                    type,\n                    this._onHoldStart.bind(this),\n                );\n            });\n\n            [\n                'mouseup',\n                'mouseleave',\n                'mouseout',\n                'touchend',\n                'touchcancel',\n            ].forEach((type) => {\n                this.EventTarget.addEventListener(\n                    type,\n                    this._onHoldEnd.bind(this),\n                );\n            });\n        }\n\n        _onHoldStart() {\n            this.isHeld = true;\n\n            this.activeHoldTimeoutId = setTimeout(() => {\n                if (this.isHeld) {\n                    this.callback();\n                }\n            }, 200);\n        }\n\n        _onHoldEnd() {\n            this.isHeld = false;\n            clearTimeout(this.activeHoldTimeoutId);\n            keys.w.pressed = false;\n            keys.a.pressed = false;\n            keys.s.pressed = false;\n            keys.d.pressed = false;\n        }\n    }\n\n    const upBtn = document.getElementById('up');\n    const leftBtn = document.getElementById('left');\n    const downBtn = document.getElementById('down');\n    const rightBtn = document.getElementById('right');\n\n    document.addEventListener('DOMContentLoaded', function () {\n        document.querySelector('div').addEventListener(\n            'contextmenu',\n            function (e) {\n                // Alternative\n                e.preventDefault();\n            },\n            false,\n        );\n    });\n\n    new ClickAndHold(upBtn, () => {\n        keys.w.pressed = true;\n        lastKey = 'w';\n    });\n    new ClickAndHold(leftBtn, () => {\n        keys.a.pressed = true;\n        lastKey = 'a';\n    });\n    new ClickAndHold(downBtn, () => {\n        keys.s.pressed = true;\n        lastKey = 's';\n    });\n    new ClickAndHold(rightBtn, () => {\n        keys.d.pressed = true;\n        lastKey = 'd';\n    });\n\n    ////////////////////////////////////////////////////////\n\n    window.addEventListener('keyup', (e) => {\n        switch (e.key) {\n            case 'w':\n                keys.w.pressed = false;\n                break;\n            case 'a':\n                keys.a.pressed = false;\n                break;\n            case 's':\n                keys.s.pressed = false;\n                break;\n            case 'd':\n                keys.d.pressed = false;\n                break;\n\n            default:\n                break;\n        }\n    });\n\n    function showInfoBox(text) {\n        infoBox.hidden = false;\n        infoBox.innerHTML = text;\n        setTimeout(() => {\n            infoBox.hidden = true;\n        }, 4000);\n    }\n}\n\n\n// #####################################################################\n// Shop\nlet pokeballBuyAmount = 0;\nlet trankBuyAmount = 0;\nlet shopMoney = 0;\n\n\n// Öffnen\nif(btn_open_Shop) {\n    console.log('Bin im Shop');\n    btn_open_Shop.addEventListener(\"click\", ()=> {\n        shopWindow.classList.add(\"active\");\n        shopMoney = save_Object.items.money;\n        pokeballBuyAmount = 0;\n        trankBuyAmount = 0;\n        btn_Pokeball.innerHTML = `Pokeball - ${pokeballPrice}$`\n        btn_Trank.innerHTML = `Supertrank - ${trankPrice}$`\n        updateShop();\n    })\n}\n\n\n// Close\nif(btnCloseShop) {\n    btnCloseShop.addEventListener(\"click\", ()=> {\n        shopWindow.classList.remove(\"active\");\n        window.location = 'map1.html'\n    })\n}\n\n// Increase Pokeball\nif(btn_Pokeball) {\n    btn_Pokeball.addEventListener(\"click\", ()=> {\n        if(shopMoney >= pokeballPrice) {\n            pokeballBuyAmount++;\n            shopMoney -= pokeballPrice;\n            updateShop()\n        }\n    })\n}\n// Increase Trank\nif(btn_Trank) {\n    btn_Trank.addEventListener(\"click\", ()=> {\n        if(shopMoney >= trankPrice) {\n            trankBuyAmount++;\n            shopMoney -= trankPrice;\n            updateShop()\n        }\n    })\n}\n\n\nif(btn_Buy) {\n    btn_Buy.addEventListener(\"click\", ()=> {\n        if(pokeballBuyAmount > 0) {\n            save_Object.items.money = shopMoney;\n            save_Object.items.pokeballs += pokeballBuyAmount;\n            save_SaveObj();\n            if(pokeballBuyAmount === 1) {\n                alert(`Du hast erfolgreich ${pokeballBuyAmount} Pokeball gekauft.`)\n            }else {\n                alert(`Du hast erfolgreich ${pokeballBuyAmount} Pokebälle gekauft.`)\n            }\n        }\n        if(trankBuyAmount > 0) {\n            save_Object.items.money = shopMoney;\n            save_Object.items.trank += trankBuyAmount;\n            save_SaveObj();\n            if(trankBuyAmount === 1) {\n                alert(`Du hast erfolgreich ${trankBuyAmount} Supertrank gekauft.`)\n            }else {\n                alert(`Du hast erfolgreich ${trankBuyAmount} Supertränke gekauft.`)\n            }\n        }\n        if(pokeballBuyAmount > 0 || trankBuyAmount > 0) {\n            shopWindow.classList.remove(\"active\");\n            window.location = 'map1.html'\n        }\n    })\n}\n\nfunction updateShop() {\n    lbl_Shop_Money.innerHTML = `$ - ${shopMoney}`;\n    lbl_Amount_Pokeballs.innerHTML = pokeballBuyAmount;\n    lbl_Amount_Tranks.innerHTML = trankBuyAmount;\n}\n\n\n\n//######################################################\n// Macht den Anfangsbuchstaben groß\n//######################################################\nfunction makeFirstLetterBig(word) {\n    const firstLetter = word[0];\n    let exportword = firstLetter.toUpperCase();\n    for (let i = 1; i < word.length; i++) {\n        exportword += word[i];\n    }\n    return exportword;\n}\n\n\n//# sourceURL=webpack://project-template/./src/js/pokemarkt.js?");

/***/ }),

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ (() => {

eval("const menueButton = document.getElementById(\"btn_Menue\");\nconst menueWindow = document.getElementById(\"windowMenu\");\nconst menueCloseButton = document.getElementById(\"btnCloseMenue\");\n// const inx = document.getElementById(\"inx\")\nconst startButton = document.getElementById(\"btnStartGame\")\n\nwindow.onload = init();\n\n\nfunction init() {\n    if(startButton) {\n        startButton.addEventListener(\"click\", ()=> {\n            window.location = 'map1.html'\n        })\n    }\n}\n\n\n\nif(menueButton) {\n    menueButton.addEventListener(\"click\", ()=> {\n            menueWindow.classList.add(\"active\")\n    })\n}\n\n\nif(menueCloseButton) {\n    menueCloseButton.addEventListener(\"click\", ()=> {\n            menueWindow.classList.remove(\"active\")\n    })\n}\n\n\n//# sourceURL=webpack://project-template/./src/js/script.js?");

/***/ }),

/***/ "./src/js/store.js":
/*!*************************!*\
  !*** ./src/js/store.js ***!
  \*************************/
/***/ (() => {

eval("\n\n//# sourceURL=webpack://project-template/./src/js/store.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;